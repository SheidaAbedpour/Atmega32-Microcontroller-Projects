
trafficLightGccBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000007ba  0000084e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006c  0080006c  0000085a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000088c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d7  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000690  00000000  00000000  000011ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060c  00000000  00000000  0000188f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000065a6  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000284  00000000  00000000  0000853e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000087c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000228  00000000  00000000  00008812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c1       	rjmp	.+618    	; 0x288 <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	33 d1       	rcall	.+614    	; 0x2ee <main>
  88:	96 c3       	rjmp	.+1836   	; 0x7b6 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <ADC_init>:
uint8_t light_state_main = GREEN;
uint8_t light_state_sub = RED;


void ADC_init() {
	ADCSRA = 0x87;
  8c:	87 e8       	ldi	r24, 0x87	; 135
  8e:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x46;
  90:	86 e4       	ldi	r24, 0x46	; 70
  92:	87 b9       	out	0x07, r24	; 7
  94:	08 95       	ret

00000096 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  96:	97 b1       	in	r25, 0x07	; 7
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	89 2b       	or	r24, r25
  9e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADIF));
  a2:	34 99       	sbic	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_read+0xc>
	ADCSRA |= (1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	95 b1       	in	r25, 0x05	; 5
}
  ac:	08 95       	ret

000000ae <show_time>:


void show_time(uint8_t sec, uint8_t seg_index) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2a 97       	sbiw	r28, 0x0a	; 10
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t nums[] = {
  c2:	9a e0       	ldi	r25, 0x0A	; 10
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	9a 95       	dec	r25
  d2:	e1 f7       	brne	.-8      	; 0xcc <show_time+0x1e>
	};
	
	uint8_t n1 = sec % 10;
	uint8_t n2 = sec / 10;
	
	PORTC = nums[n1];
  d4:	2d ec       	ldi	r18, 0xCD	; 205
  d6:	82 9f       	mul	r24, r18
  d8:	21 2d       	mov	r18, r1
  da:	11 24       	eor	r1, r1
  dc:	26 95       	lsr	r18
  de:	26 95       	lsr	r18
  e0:	26 95       	lsr	r18
  e2:	32 2f       	mov	r19, r18
  e4:	33 0f       	add	r19, r19
  e6:	93 2f       	mov	r25, r19
  e8:	99 0f       	add	r25, r25
  ea:	99 0f       	add	r25, r25
  ec:	93 0f       	add	r25, r19
  ee:	89 1b       	sub	r24, r25
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	e8 0f       	add	r30, r24
  fa:	f1 1d       	adc	r31, r1
  fc:	80 81       	ld	r24, Z
  fe:	85 bb       	out	0x15, r24	; 21
	PORTD = ~(1<<seg_index);
 100:	46 2f       	mov	r20, r22
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <show_time+0x62>
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <show_time+0x5e>
 114:	bf 01       	movw	r22, r30
 116:	60 95       	com	r22
 118:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	ef e3       	ldi	r30, 0x3F	; 63
 11c:	fc e9       	ldi	r31, 0x9C	; 156
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <show_time+0x70>
 122:	00 c0       	rjmp	.+0      	; 0x124 <show_time+0x76>
 124:	00 00       	nop
	_delay_ms(10);
	
	PORTC = nums[n2];
 126:	e1 e0       	ldi	r30, 0x01	; 1
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	e2 0f       	add	r30, r18
 130:	f1 1d       	adc	r31, r1
 132:	20 81       	ld	r18, Z
 134:	25 bb       	out	0x15, r18	; 21
	PORTD = ~(1<<(seg_index+1));
 136:	9a 01       	movw	r18, r20
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	02 c0       	rjmp	.+4      	; 0x142 <show_time+0x94>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	2a 95       	dec	r18
 144:	e2 f7       	brpl	.-8      	; 0x13e <show_time+0x90>
 146:	80 95       	com	r24
 148:	82 bb       	out	0x12, r24	; 18
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9c e9       	ldi	r25, 0x9C	; 156
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <show_time+0xa0>
 152:	00 c0       	rjmp	.+0      	; 0x154 <show_time+0xa6>
 154:	00 00       	nop
	_delay_ms(10);
}
 156:	2a 96       	adiw	r28, 0x0a	; 10
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <set_traffic_lights>:


void set_traffic_lights() {
	switch (light_state_main) {
 168:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	49 f0       	breq	.+18     	; 0x182 <set_traffic_lights+0x1a>
 170:	18 f0       	brcs	.+6      	; 0x178 <set_traffic_lights+0x10>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	59 f0       	breq	.+22     	; 0x18c <set_traffic_lights+0x24>
 176:	0e c0       	rjmp	.+28     	; 0x194 <set_traffic_lights+0x2c>
		case GREEN:
		PORTA = (PORTA | (1 << PA0)) & ~((1 << PA1) | (1 << PA2));
 178:	8b b3       	in	r24, 0x1b	; 27
 17a:	89 7f       	andi	r24, 0xF9	; 249
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	8b bb       	out	0x1b, r24	; 27
		break;
 180:	09 c0       	rjmp	.+18     	; 0x194 <set_traffic_lights+0x2c>
		case YELLOW:
		PORTA = (PORTA | (1 << PA1)) & ~((1 << PA0) | (1 << PA2));
 182:	8b b3       	in	r24, 0x1b	; 27
 184:	8a 7f       	andi	r24, 0xFA	; 250
 186:	82 60       	ori	r24, 0x02	; 2
 188:	8b bb       	out	0x1b, r24	; 27
		break;
 18a:	04 c0       	rjmp	.+8      	; 0x194 <set_traffic_lights+0x2c>
		case RED:
		PORTA = (PORTA | (1 << PA2)) & ~((1 << PA1) | (1 << PA0));
 18c:	8b b3       	in	r24, 0x1b	; 27
 18e:	8c 7f       	andi	r24, 0xFC	; 252
 190:	84 60       	ori	r24, 0x04	; 4
 192:	8b bb       	out	0x1b, r24	; 27
		break;
	}
	
	switch (light_state_sub) {
 194:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	49 f0       	breq	.+18     	; 0x1ae <set_traffic_lights+0x46>
 19c:	18 f0       	brcs	.+6      	; 0x1a4 <set_traffic_lights+0x3c>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <set_traffic_lights+0x50>
 1a2:	08 95       	ret
		case GREEN:
		PORTA = (PORTA | (1 << PA3)) & ~((1 << PA4) | (1 << PA5));
 1a4:	8b b3       	in	r24, 0x1b	; 27
 1a6:	8f 7c       	andi	r24, 0xCF	; 207
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	8b bb       	out	0x1b, r24	; 27
		break;
 1ac:	08 95       	ret
		case YELLOW:
		PORTA = (PORTA | (1 << PA4)) & ~((1 << PA3) | (1 << PA5));
 1ae:	8b b3       	in	r24, 0x1b	; 27
 1b0:	87 7d       	andi	r24, 0xD7	; 215
 1b2:	80 61       	ori	r24, 0x10	; 16
 1b4:	8b bb       	out	0x1b, r24	; 27
		break;
 1b6:	08 95       	ret
		case RED:
		PORTA = (PORTA | (1 << PA5)) & ~((1 << PA4) | (1 << PA3));
 1b8:	8b b3       	in	r24, 0x1b	; 27
 1ba:	87 7e       	andi	r24, 0xE7	; 231
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	8b bb       	out	0x1b, r24	; 27
 1c0:	08 95       	ret

000001c2 <update_traffic_lights_main>:
		break;
	}
}

void update_traffic_lights_main() {
	switch (light_state_main) {
 1c2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	81 f0       	breq	.+32     	; 0x1ea <update_traffic_lights_main+0x28>
 1ca:	18 f0       	brcs	.+6      	; 0x1d2 <update_traffic_lights_main+0x10>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	c9 f0       	breq	.+50     	; 0x202 <update_traffic_lights_main+0x40>
 1d0:	08 95       	ret
		case GREEN:
		if (sec_main == 0) {
 1d2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 1d6:	81 11       	cpse	r24, r1
 1d8:	1e c0       	rjmp	.+60     	; 0x216 <update_traffic_lights_main+0x54>
			light_state_main = YELLOW;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			sec_main = yellow_time;
 1e0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <yellow_time>
 1e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 1e8:	08 95       	ret
		}
		break;
		case YELLOW:
		if (sec_main == 0) {
 1ea:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 1ee:	81 11       	cpse	r24, r1
 1f0:	12 c0       	rjmp	.+36     	; 0x216 <update_traffic_lights_main+0x54>
			light_state_main = RED;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			sec_main = red_time;
 1f8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <red_time>
 1fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 200:	08 95       	ret
		}
		break;
		case RED:
		if (sec_main == 0) {
 202:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 206:	81 11       	cpse	r24, r1
 208:	06 c0       	rjmp	.+12     	; 0x216 <update_traffic_lights_main+0x54>
			light_state_main = GREEN;
 20a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
			sec_main = green_time;
 20e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <green_time>
 212:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 216:	08 95       	ret

00000218 <update_traffic_lights_sub>:
		break;
	}
}

void update_traffic_lights_sub() {
	switch (light_state_sub) {
 218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	81 f0       	breq	.+32     	; 0x240 <update_traffic_lights_sub+0x28>
 220:	18 f0       	brcs	.+6      	; 0x228 <update_traffic_lights_sub+0x10>
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	c9 f0       	breq	.+50     	; 0x258 <update_traffic_lights_sub+0x40>
 226:	08 95       	ret
		case GREEN:
		if (sec_sub == 0) {
 228:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 22c:	81 11       	cpse	r24, r1
 22e:	1e c0       	rjmp	.+60     	; 0x26c <update_traffic_lights_sub+0x54>
			light_state_sub = YELLOW;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			sec_sub = yellow_time;
 236:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <yellow_time>
 23a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 23e:	08 95       	ret
		}
		break;
		case YELLOW:
		if (sec_sub == 0) {
 240:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 244:	81 11       	cpse	r24, r1
 246:	12 c0       	rjmp	.+36     	; 0x26c <update_traffic_lights_sub+0x54>
			light_state_sub = RED;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			sec_sub = red_time;
 24e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <red_time>
 252:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 256:	08 95       	ret
		}
		break;
		case RED:
		if (sec_sub == 0) {
 258:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 25c:	81 11       	cpse	r24, r1
 25e:	06 c0       	rjmp	.+12     	; 0x26c <update_traffic_lights_sub+0x54>
			light_state_sub = GREEN;
 260:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			sec_sub = green_time;
 264:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <green_time>
 268:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 26c:	08 95       	ret

0000026e <init_timer1>:
	}
}


void init_timer1() {
	TCNT1 = 0;
 26e:	1d bc       	out	0x2d, r1	; 45
 270:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 15624;
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	9d e3       	ldi	r25, 0x3D	; 61
 276:	9b bd       	out	0x2b, r25	; 43
 278:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0x00;
 27a:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC mode, prescaler 1024
 27c:	8d e0       	ldi	r24, 0x0D	; 13
 27e:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1A);
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	89 bf       	out	0x39, r24	; 57
	sei();
 284:	78 94       	sei
 286:	08 95       	ret

00000288 <__vector_7>:
}

ISR(TIMER1_COMPA_vect) {
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
	
	if (sec_main > 0) {
 2aa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 2ae:	88 23       	and	r24, r24
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <__vector_7+0x30>
		sec_main--;
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
	}
	update_traffic_lights_main();
 2b8:	84 df       	rcall	.-248    	; 0x1c2 <update_traffic_lights_main>

	if (sec_sub > 0) {
 2ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 2be:	88 23       	and	r24, r24
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <__vector_7+0x40>
		sec_sub--;
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
	}
	update_traffic_lights_sub();
	
	set_traffic_lights();
 2c8:	a7 df       	rcall	.-178    	; 0x218 <update_traffic_lights_sub>
 2ca:	4e df       	rcall	.-356    	; 0x168 <set_traffic_lights>
}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <main>:



int main (void) {
	
	DDRA = 0x3F;
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~((1 << PA6) | (1 << PA7));
 2f2:	8b b3       	in	r24, 0x1b	; 27
 2f4:	8f 73       	andi	r24, 0x3F	; 63
 2f6:	8b bb       	out	0x1b, r24	; 27
	
	DDRB &= ~(1<<PB3);
 2f8:	bb 98       	cbi	0x17, 3	; 23
	DDRC = 0xFF;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 2fe:	81 bb       	out	0x11, r24	; 17

	ADC_init();
 300:	c5 de       	rcall	.-630    	; 0x8c <ADC_init>
	init_timer1();
 302:	b5 df       	rcall	.-150    	; 0x26e <init_timer1>
 304:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <green_time>
	
	sec_main = green_time;
 308:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 30c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <red_time>
	sec_sub = red_time;
 310:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
	set_traffic_lights();
 314:	29 df       	rcall	.-430    	; 0x168 <set_traffic_lights>
 316:	8c e3       	ldi	r24, 0x3C	; 60
	
	green_time = 60;  
 318:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <green_time>
 31c:	82 e0       	ldi	r24, 0x02	; 2
	yellow_time = 2; 
 31e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <yellow_time>
 322:	8d e2       	ldi	r24, 0x2D	; 45
	red_time = 45;
 324:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <red_time>
	uint16_t min_yellow = 1;
	
	
	while(1) {
		
		adc_green = ADC_read(6);
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	b5 de       	rcall	.-662    	; 0x96 <ADC_read>
 32c:	8c 01       	movw	r16, r24
		adc_yellow = ADC_read(7);
 32e:	87 e0       	ldi	r24, 0x07	; 7
 330:	b2 de       	rcall	.-668    	; 0x96 <ADC_read>
 332:	ec 01       	movw	r28, r24
 334:	c8 01       	movw	r24, r16
		
		green_time = ((uint32_t)(adc_green) * (max_green - min_green)) / 1023.0 + min_green;	
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	ac 01       	movw	r20, r24
 33c:	bd 01       	movw	r22, r26
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	66 1f       	adc	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	84 0f       	add	r24, r20
 348:	95 1f       	adc	r25, r21
 34a:	a6 1f       	adc	r26, r22
 34c:	b7 1f       	adc	r27, r23
 34e:	ac 01       	movw	r20, r24
 350:	bd 01       	movw	r22, r26
 352:	44 0f       	add	r20, r20
 354:	55 1f       	adc	r21, r21
 356:	66 1f       	adc	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	44 0f       	add	r20, r20
 35c:	55 1f       	adc	r21, r21
 35e:	66 1f       	adc	r22, r22
 360:	77 1f       	adc	r23, r23
 362:	84 0f       	add	r24, r20
 364:	95 1f       	adc	r25, r21
 366:	a6 1f       	adc	r26, r22
 368:	b7 1f       	adc	r27, r23
 36a:	bc 01       	movw	r22, r24
 36c:	cd 01       	movw	r24, r26
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	2e d1       	rcall	.+604    	; 0x5d4 <__floatunsisf>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 ec       	ldi	r19, 0xC0	; 192
 37c:	4f e7       	ldi	r20, 0x7F	; 127
 37e:	54 e4       	ldi	r21, 0x44	; 68
 380:	95 d0       	rcall	.+298    	; 0x4ac <__divsf3>
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	40 ef       	ldi	r20, 0xF0	; 240
 388:	51 e4       	ldi	r21, 0x41	; 65
 38a:	2c d0       	rcall	.+88     	; 0x3e4 <__addsf3>
 38c:	f7 d0       	rcall	.+494    	; 0x57c <__fixunssfsi>
 38e:	16 2f       	mov	r17, r22
 390:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <green_time>
		yellow_time = ((uint32_t)(adc_yellow) * (max_yellow - min_yellow)) / 1023.0 + min_yellow;
 394:	be 01       	movw	r22, r28
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	1c d1       	rcall	.+568    	; 0x5d4 <__floatunsisf>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 ec       	ldi	r19, 0xC0	; 192
 3a0:	4f e7       	ldi	r20, 0x7F	; 127
 3a2:	54 e4       	ldi	r21, 0x44	; 68
 3a4:	83 d0       	rcall	.+262    	; 0x4ac <__divsf3>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e8       	ldi	r20, 0x80	; 128
 3ac:	5f e3       	ldi	r21, 0x3F	; 63
 3ae:	1a d0       	rcall	.+52     	; 0x3e4 <__addsf3>
 3b0:	e5 d0       	rcall	.+458    	; 0x57c <__fixunssfsi>
 3b2:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <yellow_time>
		red_time = 0.75 * green_time;
 3b6:	61 2f       	mov	r22, r17
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0c d1       	rcall	.+536    	; 0x5d8 <__floatsisf>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	40 e4       	ldi	r20, 0x40	; 64
 3c6:	5f e3       	ldi	r21, 0x3F	; 63
 3c8:	93 d1       	rcall	.+806    	; 0x6f0 <__mulsf3>
 3ca:	d8 d0       	rcall	.+432    	; 0x57c <__fixunssfsi>
 3cc:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <red_time>
 3d0:	60 e0       	ldi	r22, 0x00	; 0
		
		show_time(sec_main, 0);
 3d2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 3d6:	6b de       	rcall	.-810    	; 0xae <show_time>
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
		show_time(sec_sub, 2);
 3de:	67 de       	rcall	.-818    	; 0xae <show_time>
 3e0:	a3 cf       	rjmp	.-186    	; 0x328 <main+0x3a>

000003e2 <__subsf3>:
 3e2:	50 58       	subi	r21, 0x80	; 128

000003e4 <__addsf3>:
 3e4:	bb 27       	eor	r27, r27
 3e6:	aa 27       	eor	r26, r26
 3e8:	0e d0       	rcall	.+28     	; 0x406 <__addsf3x>
 3ea:	48 c1       	rjmp	.+656    	; 0x67c <__fp_round>
 3ec:	39 d1       	rcall	.+626    	; 0x660 <__fp_pscA>
 3ee:	30 f0       	brcs	.+12     	; 0x3fc <__addsf3+0x18>
 3f0:	3e d1       	rcall	.+636    	; 0x66e <__fp_pscB>
 3f2:	20 f0       	brcs	.+8      	; 0x3fc <__addsf3+0x18>
 3f4:	31 f4       	brne	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f6:	9f 3f       	cpi	r25, 0xFF	; 255
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__addsf3+0x1a>
 3fa:	1e f4       	brtc	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fc:	2e c1       	rjmp	.+604    	; 0x65a <__fp_nan>
 3fe:	0e f4       	brtc	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	e0 95       	com	r30
 402:	e7 fb       	bst	r30, 7
 404:	24 c1       	rjmp	.+584    	; 0x64e <__fp_inf>

00000406 <__addsf3x>:
 406:	e9 2f       	mov	r30, r25
 408:	4a d1       	rcall	.+660    	; 0x69e <__fp_split3>
 40a:	80 f3       	brcs	.-32     	; 0x3ec <__addsf3+0x8>
 40c:	ba 17       	cp	r27, r26
 40e:	62 07       	cpc	r22, r18
 410:	73 07       	cpc	r23, r19
 412:	84 07       	cpc	r24, r20
 414:	95 07       	cpc	r25, r21
 416:	18 f0       	brcs	.+6      	; 0x41e <__addsf3x+0x18>
 418:	71 f4       	brne	.+28     	; 0x436 <__addsf3x+0x30>
 41a:	9e f5       	brtc	.+102    	; 0x482 <__addsf3x+0x7c>
 41c:	62 c1       	rjmp	.+708    	; 0x6e2 <__fp_zero>
 41e:	0e f4       	brtc	.+2      	; 0x422 <__addsf3x+0x1c>
 420:	e0 95       	com	r30
 422:	0b 2e       	mov	r0, r27
 424:	ba 2f       	mov	r27, r26
 426:	a0 2d       	mov	r26, r0
 428:	0b 01       	movw	r0, r22
 42a:	b9 01       	movw	r22, r18
 42c:	90 01       	movw	r18, r0
 42e:	0c 01       	movw	r0, r24
 430:	ca 01       	movw	r24, r20
 432:	a0 01       	movw	r20, r0
 434:	11 24       	eor	r1, r1
 436:	ff 27       	eor	r31, r31
 438:	59 1b       	sub	r21, r25
 43a:	99 f0       	breq	.+38     	; 0x462 <__addsf3x+0x5c>
 43c:	59 3f       	cpi	r21, 0xF9	; 249
 43e:	50 f4       	brcc	.+20     	; 0x454 <__addsf3x+0x4e>
 440:	50 3e       	cpi	r21, 0xE0	; 224
 442:	68 f1       	brcs	.+90     	; 0x49e <__addsf3x+0x98>
 444:	1a 16       	cp	r1, r26
 446:	f0 40       	sbci	r31, 0x00	; 0
 448:	a2 2f       	mov	r26, r18
 44a:	23 2f       	mov	r18, r19
 44c:	34 2f       	mov	r19, r20
 44e:	44 27       	eor	r20, r20
 450:	58 5f       	subi	r21, 0xF8	; 248
 452:	f3 cf       	rjmp	.-26     	; 0x43a <__addsf3x+0x34>
 454:	46 95       	lsr	r20
 456:	37 95       	ror	r19
 458:	27 95       	ror	r18
 45a:	a7 95       	ror	r26
 45c:	f0 40       	sbci	r31, 0x00	; 0
 45e:	53 95       	inc	r21
 460:	c9 f7       	brne	.-14     	; 0x454 <__addsf3x+0x4e>
 462:	7e f4       	brtc	.+30     	; 0x482 <__addsf3x+0x7c>
 464:	1f 16       	cp	r1, r31
 466:	ba 0b       	sbc	r27, r26
 468:	62 0b       	sbc	r22, r18
 46a:	73 0b       	sbc	r23, r19
 46c:	84 0b       	sbc	r24, r20
 46e:	ba f0       	brmi	.+46     	; 0x49e <__addsf3x+0x98>
 470:	91 50       	subi	r25, 0x01	; 1
 472:	a1 f0       	breq	.+40     	; 0x49c <__addsf3x+0x96>
 474:	ff 0f       	add	r31, r31
 476:	bb 1f       	adc	r27, r27
 478:	66 1f       	adc	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	c2 f7       	brpl	.-16     	; 0x470 <__addsf3x+0x6a>
 480:	0e c0       	rjmp	.+28     	; 0x49e <__addsf3x+0x98>
 482:	ba 0f       	add	r27, r26
 484:	62 1f       	adc	r22, r18
 486:	73 1f       	adc	r23, r19
 488:	84 1f       	adc	r24, r20
 48a:	48 f4       	brcc	.+18     	; 0x49e <__addsf3x+0x98>
 48c:	87 95       	ror	r24
 48e:	77 95       	ror	r23
 490:	67 95       	ror	r22
 492:	b7 95       	ror	r27
 494:	f7 95       	ror	r31
 496:	9e 3f       	cpi	r25, 0xFE	; 254
 498:	08 f0       	brcs	.+2      	; 0x49c <__addsf3x+0x96>
 49a:	b3 cf       	rjmp	.-154    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 49c:	93 95       	inc	r25
 49e:	88 0f       	add	r24, r24
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <__addsf3x+0x9e>
 4a2:	99 27       	eor	r25, r25
 4a4:	ee 0f       	add	r30, r30
 4a6:	97 95       	ror	r25
 4a8:	87 95       	ror	r24
 4aa:	08 95       	ret

000004ac <__divsf3>:
 4ac:	0c d0       	rcall	.+24     	; 0x4c6 <__divsf3x>
 4ae:	e6 c0       	rjmp	.+460    	; 0x67c <__fp_round>
 4b0:	de d0       	rcall	.+444    	; 0x66e <__fp_pscB>
 4b2:	40 f0       	brcs	.+16     	; 0x4c4 <__divsf3+0x18>
 4b4:	d5 d0       	rcall	.+426    	; 0x660 <__fp_pscA>
 4b6:	30 f0       	brcs	.+12     	; 0x4c4 <__divsf3+0x18>
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <__divsf3+0x16>
 4ba:	5f 3f       	cpi	r21, 0xFF	; 255
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <__divsf3+0x18>
 4be:	c7 c0       	rjmp	.+398    	; 0x64e <__fp_inf>
 4c0:	51 11       	cpse	r21, r1
 4c2:	10 c1       	rjmp	.+544    	; 0x6e4 <__fp_szero>
 4c4:	ca c0       	rjmp	.+404    	; 0x65a <__fp_nan>

000004c6 <__divsf3x>:
 4c6:	eb d0       	rcall	.+470    	; 0x69e <__fp_split3>
 4c8:	98 f3       	brcs	.-26     	; 0x4b0 <__divsf3+0x4>

000004ca <__divsf3_pse>:
 4ca:	99 23       	and	r25, r25
 4cc:	c9 f3       	breq	.-14     	; 0x4c0 <__divsf3+0x14>
 4ce:	55 23       	and	r21, r21
 4d0:	b1 f3       	breq	.-20     	; 0x4be <__divsf3+0x12>
 4d2:	95 1b       	sub	r25, r21
 4d4:	55 0b       	sbc	r21, r21
 4d6:	bb 27       	eor	r27, r27
 4d8:	aa 27       	eor	r26, r26
 4da:	62 17       	cp	r22, r18
 4dc:	73 07       	cpc	r23, r19
 4de:	84 07       	cpc	r24, r20
 4e0:	38 f0       	brcs	.+14     	; 0x4f0 <__divsf3_pse+0x26>
 4e2:	9f 5f       	subi	r25, 0xFF	; 255
 4e4:	5f 4f       	sbci	r21, 0xFF	; 255
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	44 1f       	adc	r20, r20
 4ec:	aa 1f       	adc	r26, r26
 4ee:	a9 f3       	breq	.-22     	; 0x4da <__divsf3_pse+0x10>
 4f0:	33 d0       	rcall	.+102    	; 0x558 <__divsf3_pse+0x8e>
 4f2:	0e 2e       	mov	r0, r30
 4f4:	3a f0       	brmi	.+14     	; 0x504 <__divsf3_pse+0x3a>
 4f6:	e0 e8       	ldi	r30, 0x80	; 128
 4f8:	30 d0       	rcall	.+96     	; 0x55a <__divsf3_pse+0x90>
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	50 40       	sbci	r21, 0x00	; 0
 4fe:	e6 95       	lsr	r30
 500:	00 1c       	adc	r0, r0
 502:	ca f7       	brpl	.-14     	; 0x4f6 <__divsf3_pse+0x2c>
 504:	29 d0       	rcall	.+82     	; 0x558 <__divsf3_pse+0x8e>
 506:	fe 2f       	mov	r31, r30
 508:	27 d0       	rcall	.+78     	; 0x558 <__divsf3_pse+0x8e>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	88 1f       	adc	r24, r24
 510:	bb 1f       	adc	r27, r27
 512:	26 17       	cp	r18, r22
 514:	37 07       	cpc	r19, r23
 516:	48 07       	cpc	r20, r24
 518:	ab 07       	cpc	r26, r27
 51a:	b0 e8       	ldi	r27, 0x80	; 128
 51c:	09 f0       	breq	.+2      	; 0x520 <__divsf3_pse+0x56>
 51e:	bb 0b       	sbc	r27, r27
 520:	80 2d       	mov	r24, r0
 522:	bf 01       	movw	r22, r30
 524:	ff 27       	eor	r31, r31
 526:	93 58       	subi	r25, 0x83	; 131
 528:	5f 4f       	sbci	r21, 0xFF	; 255
 52a:	2a f0       	brmi	.+10     	; 0x536 <__divsf3_pse+0x6c>
 52c:	9e 3f       	cpi	r25, 0xFE	; 254
 52e:	51 05       	cpc	r21, r1
 530:	68 f0       	brcs	.+26     	; 0x54c <__divsf3_pse+0x82>
 532:	8d c0       	rjmp	.+282    	; 0x64e <__fp_inf>
 534:	d7 c0       	rjmp	.+430    	; 0x6e4 <__fp_szero>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	ec f3       	brlt	.-6      	; 0x534 <__divsf3_pse+0x6a>
 53a:	98 3e       	cpi	r25, 0xE8	; 232
 53c:	dc f3       	brlt	.-10     	; 0x534 <__divsf3_pse+0x6a>
 53e:	86 95       	lsr	r24
 540:	77 95       	ror	r23
 542:	67 95       	ror	r22
 544:	b7 95       	ror	r27
 546:	f7 95       	ror	r31
 548:	9f 5f       	subi	r25, 0xFF	; 255
 54a:	c9 f7       	brne	.-14     	; 0x53e <__divsf3_pse+0x74>
 54c:	88 0f       	add	r24, r24
 54e:	91 1d       	adc	r25, r1
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret
 558:	e1 e0       	ldi	r30, 0x01	; 1
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	88 1f       	adc	r24, r24
 560:	bb 1f       	adc	r27, r27
 562:	62 17       	cp	r22, r18
 564:	73 07       	cpc	r23, r19
 566:	84 07       	cpc	r24, r20
 568:	ba 07       	cpc	r27, r26
 56a:	20 f0       	brcs	.+8      	; 0x574 <__divsf3_pse+0xaa>
 56c:	62 1b       	sub	r22, r18
 56e:	73 0b       	sbc	r23, r19
 570:	84 0b       	sbc	r24, r20
 572:	ba 0b       	sbc	r27, r26
 574:	ee 1f       	adc	r30, r30
 576:	88 f7       	brcc	.-30     	; 0x55a <__divsf3_pse+0x90>
 578:	e0 95       	com	r30
 57a:	08 95       	ret

0000057c <__fixunssfsi>:
 57c:	98 d0       	rcall	.+304    	; 0x6ae <__fp_splitA>
 57e:	88 f0       	brcs	.+34     	; 0x5a2 <__fixunssfsi+0x26>
 580:	9f 57       	subi	r25, 0x7F	; 127
 582:	90 f0       	brcs	.+36     	; 0x5a8 <__fixunssfsi+0x2c>
 584:	b9 2f       	mov	r27, r25
 586:	99 27       	eor	r25, r25
 588:	b7 51       	subi	r27, 0x17	; 23
 58a:	a0 f0       	brcs	.+40     	; 0x5b4 <__fixunssfsi+0x38>
 58c:	d1 f0       	breq	.+52     	; 0x5c2 <__fixunssfsi+0x46>
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	1a f0       	brmi	.+6      	; 0x59e <__fixunssfsi+0x22>
 598:	ba 95       	dec	r27
 59a:	c9 f7       	brne	.-14     	; 0x58e <__fixunssfsi+0x12>
 59c:	12 c0       	rjmp	.+36     	; 0x5c2 <__fixunssfsi+0x46>
 59e:	b1 30       	cpi	r27, 0x01	; 1
 5a0:	81 f0       	breq	.+32     	; 0x5c2 <__fixunssfsi+0x46>
 5a2:	9f d0       	rcall	.+318    	; 0x6e2 <__fp_zero>
 5a4:	b1 e0       	ldi	r27, 0x01	; 1
 5a6:	08 95       	ret
 5a8:	9c c0       	rjmp	.+312    	; 0x6e2 <__fp_zero>
 5aa:	67 2f       	mov	r22, r23
 5ac:	78 2f       	mov	r23, r24
 5ae:	88 27       	eor	r24, r24
 5b0:	b8 5f       	subi	r27, 0xF8	; 248
 5b2:	39 f0       	breq	.+14     	; 0x5c2 <__fixunssfsi+0x46>
 5b4:	b9 3f       	cpi	r27, 0xF9	; 249
 5b6:	cc f3       	brlt	.-14     	; 0x5aa <__fixunssfsi+0x2e>
 5b8:	86 95       	lsr	r24
 5ba:	77 95       	ror	r23
 5bc:	67 95       	ror	r22
 5be:	b3 95       	inc	r27
 5c0:	d9 f7       	brne	.-10     	; 0x5b8 <__fixunssfsi+0x3c>
 5c2:	3e f4       	brtc	.+14     	; 0x5d2 <__fixunssfsi+0x56>
 5c4:	90 95       	com	r25
 5c6:	80 95       	com	r24
 5c8:	70 95       	com	r23
 5ca:	61 95       	neg	r22
 5cc:	7f 4f       	sbci	r23, 0xFF	; 255
 5ce:	8f 4f       	sbci	r24, 0xFF	; 255
 5d0:	9f 4f       	sbci	r25, 0xFF	; 255
 5d2:	08 95       	ret

000005d4 <__floatunsisf>:
 5d4:	e8 94       	clt
 5d6:	09 c0       	rjmp	.+18     	; 0x5ea <__floatsisf+0x12>

000005d8 <__floatsisf>:
 5d8:	97 fb       	bst	r25, 7
 5da:	3e f4       	brtc	.+14     	; 0x5ea <__floatsisf+0x12>
 5dc:	90 95       	com	r25
 5de:	80 95       	com	r24
 5e0:	70 95       	com	r23
 5e2:	61 95       	neg	r22
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	99 23       	and	r25, r25
 5ec:	a9 f0       	breq	.+42     	; 0x618 <__floatsisf+0x40>
 5ee:	f9 2f       	mov	r31, r25
 5f0:	96 e9       	ldi	r25, 0x96	; 150
 5f2:	bb 27       	eor	r27, r27
 5f4:	93 95       	inc	r25
 5f6:	f6 95       	lsr	r31
 5f8:	87 95       	ror	r24
 5fa:	77 95       	ror	r23
 5fc:	67 95       	ror	r22
 5fe:	b7 95       	ror	r27
 600:	f1 11       	cpse	r31, r1
 602:	f8 cf       	rjmp	.-16     	; 0x5f4 <__floatsisf+0x1c>
 604:	fa f4       	brpl	.+62     	; 0x644 <__floatsisf+0x6c>
 606:	bb 0f       	add	r27, r27
 608:	11 f4       	brne	.+4      	; 0x60e <__floatsisf+0x36>
 60a:	60 ff       	sbrs	r22, 0
 60c:	1b c0       	rjmp	.+54     	; 0x644 <__floatsisf+0x6c>
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	8f 4f       	sbci	r24, 0xFF	; 255
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	16 c0       	rjmp	.+44     	; 0x644 <__floatsisf+0x6c>
 618:	88 23       	and	r24, r24
 61a:	11 f0       	breq	.+4      	; 0x620 <__floatsisf+0x48>
 61c:	96 e9       	ldi	r25, 0x96	; 150
 61e:	11 c0       	rjmp	.+34     	; 0x642 <__floatsisf+0x6a>
 620:	77 23       	and	r23, r23
 622:	21 f0       	breq	.+8      	; 0x62c <__floatsisf+0x54>
 624:	9e e8       	ldi	r25, 0x8E	; 142
 626:	87 2f       	mov	r24, r23
 628:	76 2f       	mov	r23, r22
 62a:	05 c0       	rjmp	.+10     	; 0x636 <__floatsisf+0x5e>
 62c:	66 23       	and	r22, r22
 62e:	71 f0       	breq	.+28     	; 0x64c <__floatsisf+0x74>
 630:	96 e8       	ldi	r25, 0x86	; 134
 632:	86 2f       	mov	r24, r22
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	60 e0       	ldi	r22, 0x00	; 0
 638:	2a f0       	brmi	.+10     	; 0x644 <__floatsisf+0x6c>
 63a:	9a 95       	dec	r25
 63c:	66 0f       	add	r22, r22
 63e:	77 1f       	adc	r23, r23
 640:	88 1f       	adc	r24, r24
 642:	da f7       	brpl	.-10     	; 0x63a <__floatsisf+0x62>
 644:	88 0f       	add	r24, r24
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <__fp_inf>:
 64e:	97 f9       	bld	r25, 7
 650:	9f 67       	ori	r25, 0x7F	; 127
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	08 95       	ret

0000065a <__fp_nan>:
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	08 95       	ret

00000660 <__fp_pscA>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	09 06       	cpc	r0, r25
 66c:	08 95       	ret

0000066e <__fp_pscB>:
 66e:	00 24       	eor	r0, r0
 670:	0a 94       	dec	r0
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	05 06       	cpc	r0, r21
 67a:	08 95       	ret

0000067c <__fp_round>:
 67c:	09 2e       	mov	r0, r25
 67e:	03 94       	inc	r0
 680:	00 0c       	add	r0, r0
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0xc>
 684:	88 23       	and	r24, r24
 686:	52 f0       	brmi	.+20     	; 0x69c <__fp_round+0x20>
 688:	bb 0f       	add	r27, r27
 68a:	40 f4       	brcc	.+16     	; 0x69c <__fp_round+0x20>
 68c:	bf 2b       	or	r27, r31
 68e:	11 f4       	brne	.+4      	; 0x694 <__fp_round+0x18>
 690:	60 ff       	sbrs	r22, 0
 692:	04 c0       	rjmp	.+8      	; 0x69c <__fp_round+0x20>
 694:	6f 5f       	subi	r22, 0xFF	; 255
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <__fp_split3>:
 69e:	57 fd       	sbrc	r21, 7
 6a0:	90 58       	subi	r25, 0x80	; 128
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	59 f0       	breq	.+22     	; 0x6be <__fp_splitA+0x10>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__fp_splitA+0x1a>
 6ac:	47 95       	ror	r20

000006ae <__fp_splitA>:
 6ae:	88 0f       	add	r24, r24
 6b0:	97 fb       	bst	r25, 7
 6b2:	99 1f       	adc	r25, r25
 6b4:	61 f0       	breq	.+24     	; 0x6ce <__fp_splitA+0x20>
 6b6:	9f 3f       	cpi	r25, 0xFF	; 255
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <__fp_splitA+0x2a>
 6ba:	87 95       	ror	r24
 6bc:	08 95       	ret
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	f2 cf       	rjmp	.-28     	; 0x6ac <__fp_split3+0xe>
 6c8:	46 95       	lsr	r20
 6ca:	f1 df       	rcall	.-30     	; 0x6ae <__fp_splitA>
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <__fp_splitA+0x30>
 6ce:	16 16       	cp	r1, r22
 6d0:	17 06       	cpc	r1, r23
 6d2:	18 06       	cpc	r1, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	f1 cf       	rjmp	.-30     	; 0x6ba <__fp_splitA+0xc>
 6d8:	86 95       	lsr	r24
 6da:	71 05       	cpc	r23, r1
 6dc:	61 05       	cpc	r22, r1
 6de:	08 94       	sec
 6e0:	08 95       	ret

000006e2 <__fp_zero>:
 6e2:	e8 94       	clt

000006e4 <__fp_szero>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	66 27       	eor	r22, r22
 6e8:	77 27       	eor	r23, r23
 6ea:	cb 01       	movw	r24, r22
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__mulsf3>:
 6f0:	0b d0       	rcall	.+22     	; 0x708 <__mulsf3x>
 6f2:	c4 cf       	rjmp	.-120    	; 0x67c <__fp_round>
 6f4:	b5 df       	rcall	.-150    	; 0x660 <__fp_pscA>
 6f6:	28 f0       	brcs	.+10     	; 0x702 <__mulsf3+0x12>
 6f8:	ba df       	rcall	.-140    	; 0x66e <__fp_pscB>
 6fa:	18 f0       	brcs	.+6      	; 0x702 <__mulsf3+0x12>
 6fc:	95 23       	and	r25, r21
 6fe:	09 f0       	breq	.+2      	; 0x702 <__mulsf3+0x12>
 700:	a6 cf       	rjmp	.-180    	; 0x64e <__fp_inf>
 702:	ab cf       	rjmp	.-170    	; 0x65a <__fp_nan>
 704:	11 24       	eor	r1, r1
 706:	ee cf       	rjmp	.-36     	; 0x6e4 <__fp_szero>

00000708 <__mulsf3x>:
 708:	ca df       	rcall	.-108    	; 0x69e <__fp_split3>
 70a:	a0 f3       	brcs	.-24     	; 0x6f4 <__mulsf3+0x4>

0000070c <__mulsf3_pse>:
 70c:	95 9f       	mul	r25, r21
 70e:	d1 f3       	breq	.-12     	; 0x704 <__mulsf3+0x14>
 710:	95 0f       	add	r25, r21
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	55 1f       	adc	r21, r21
 716:	62 9f       	mul	r22, r18
 718:	f0 01       	movw	r30, r0
 71a:	72 9f       	mul	r23, r18
 71c:	bb 27       	eor	r27, r27
 71e:	f0 0d       	add	r31, r0
 720:	b1 1d       	adc	r27, r1
 722:	63 9f       	mul	r22, r19
 724:	aa 27       	eor	r26, r26
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	aa 1f       	adc	r26, r26
 72c:	64 9f       	mul	r22, r20
 72e:	66 27       	eor	r22, r22
 730:	b0 0d       	add	r27, r0
 732:	a1 1d       	adc	r26, r1
 734:	66 1f       	adc	r22, r22
 736:	82 9f       	mul	r24, r18
 738:	22 27       	eor	r18, r18
 73a:	b0 0d       	add	r27, r0
 73c:	a1 1d       	adc	r26, r1
 73e:	62 1f       	adc	r22, r18
 740:	73 9f       	mul	r23, r19
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	83 9f       	mul	r24, r19
 74a:	a0 0d       	add	r26, r0
 74c:	61 1d       	adc	r22, r1
 74e:	22 1f       	adc	r18, r18
 750:	74 9f       	mul	r23, r20
 752:	33 27       	eor	r19, r19
 754:	a0 0d       	add	r26, r0
 756:	61 1d       	adc	r22, r1
 758:	23 1f       	adc	r18, r19
 75a:	84 9f       	mul	r24, r20
 75c:	60 0d       	add	r22, r0
 75e:	21 1d       	adc	r18, r1
 760:	82 2f       	mov	r24, r18
 762:	76 2f       	mov	r23, r22
 764:	6a 2f       	mov	r22, r26
 766:	11 24       	eor	r1, r1
 768:	9f 57       	subi	r25, 0x7F	; 127
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	8a f0       	brmi	.+34     	; 0x790 <__mulsf3_pse+0x84>
 76e:	e1 f0       	breq	.+56     	; 0x7a8 <__mulsf3_pse+0x9c>
 770:	88 23       	and	r24, r24
 772:	4a f0       	brmi	.+18     	; 0x786 <__mulsf3_pse+0x7a>
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	bb 1f       	adc	r27, r27
 77a:	66 1f       	adc	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	91 50       	subi	r25, 0x01	; 1
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	a9 f7       	brne	.-22     	; 0x770 <__mulsf3_pse+0x64>
 786:	9e 3f       	cpi	r25, 0xFE	; 254
 788:	51 05       	cpc	r21, r1
 78a:	70 f0       	brcs	.+28     	; 0x7a8 <__mulsf3_pse+0x9c>
 78c:	60 cf       	rjmp	.-320    	; 0x64e <__fp_inf>
 78e:	aa cf       	rjmp	.-172    	; 0x6e4 <__fp_szero>
 790:	5f 3f       	cpi	r21, 0xFF	; 255
 792:	ec f3       	brlt	.-6      	; 0x78e <__mulsf3_pse+0x82>
 794:	98 3e       	cpi	r25, 0xE8	; 232
 796:	dc f3       	brlt	.-10     	; 0x78e <__mulsf3_pse+0x82>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f7 95       	ror	r31
 7a2:	e7 95       	ror	r30
 7a4:	9f 5f       	subi	r25, 0xFF	; 255
 7a6:	c1 f7       	brne	.-16     	; 0x798 <__mulsf3_pse+0x8c>
 7a8:	fe 2b       	or	r31, r30
 7aa:	88 0f       	add	r24, r24
 7ac:	91 1d       	adc	r25, r1
 7ae:	96 95       	lsr	r25
 7b0:	87 95       	ror	r24
 7b2:	97 f9       	bld	r25, 7
 7b4:	08 95       	ret

000007b6 <_exit>:
 7b6:	f8 94       	cli

000007b8 <__stop_program>:
 7b8:	ff cf       	rjmp	.-2      	; 0x7b8 <__stop_program>
