
trafficLightGccBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000130  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000714  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062d  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000443  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000066d8  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000152  00000000  00000000  00007b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00007c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000436  00000000  00000000  00007c8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	3a c0       	rjmp	.+116    	; 0x7a <__bad_interrupt>
   6:	00 00       	nop
   8:	38 c0       	rjmp	.+112    	; 0x7a <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__bad_interrupt>
   e:	00 00       	nop
  10:	34 c0       	rjmp	.+104    	; 0x7a <__bad_interrupt>
  12:	00 00       	nop
  14:	32 c0       	rjmp	.+100    	; 0x7a <__bad_interrupt>
  16:	00 00       	nop
  18:	30 c0       	rjmp	.+96     	; 0x7a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2e c0       	rjmp	.+92     	; 0x7a <__bad_interrupt>
  1e:	00 00       	nop
  20:	2c c0       	rjmp	.+88     	; 0x7a <__bad_interrupt>
  22:	00 00       	nop
  24:	2a c0       	rjmp	.+84     	; 0x7a <__bad_interrupt>
  26:	00 00       	nop
  28:	28 c0       	rjmp	.+80     	; 0x7a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	26 c0       	rjmp	.+76     	; 0x7a <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c0       	rjmp	.+72     	; 0x7a <__bad_interrupt>
  32:	00 00       	nop
  34:	22 c0       	rjmp	.+68     	; 0x7a <__bad_interrupt>
  36:	00 00       	nop
  38:	20 c0       	rjmp	.+64     	; 0x7a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1e c0       	rjmp	.+60     	; 0x7a <__bad_interrupt>
  3e:	00 00       	nop
  40:	1c c0       	rjmp	.+56     	; 0x7a <__bad_interrupt>
  42:	00 00       	nop
  44:	1a c0       	rjmp	.+52     	; 0x7a <__bad_interrupt>
  46:	00 00       	nop
  48:	18 c0       	rjmp	.+48     	; 0x7a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	16 c0       	rjmp	.+44     	; 0x7a <__bad_interrupt>
  4e:	00 00       	nop
  50:	14 c0       	rjmp	.+40     	; 0x7a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	51 d0       	rcall	.+162    	; 0x11a <main>
  78:	59 c0       	rjmp	.+178    	; 0x12c <_exit>

0000007a <__bad_interrupt>:
  7a:	c2 cf       	rjmp	.-124    	; 0x0 <__vectors>

0000007c <ADC_init>:
uint16_t ADC_read(void) {
	ADCSRA |= (1<<ADSC);
	while (ADCSRA & (1 << ADIF));
	ADCSRA |= (1<<ADIF);
	return ADC;
}
  7c:	87 e8       	ldi	r24, 0x87	; 135
  7e:	86 b9       	out	0x06, r24	; 6
  80:	83 e6       	ldi	r24, 0x63	; 99
  82:	87 b9       	out	0x07, r24	; 7
  84:	08 95       	ret

00000086 <show_time>:

void show_time(uint8_t sec) {
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	2a 97       	sbiw	r28, 0x0a	; 10
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	f8 94       	cli
  94:	de bf       	out	0x3e, r29	; 62
  96:	0f be       	out	0x3f, r0	; 63
  98:	cd bf       	out	0x3d, r28	; 61
	uint8_t nums[] = {0x3F, 0x06, 0xDB, 0xCF, 0xE6, 0xED, 0xFD, 0x07, 0xFF, 0xEF};
  9a:	9a e0       	ldi	r25, 0x0A	; 10
  9c:	e0 e6       	ldi	r30, 0x60	; 96
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	de 01       	movw	r26, r28
  a2:	11 96       	adiw	r26, 0x01	; 1
  a4:	01 90       	ld	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	9a 95       	dec	r25
  aa:	e1 f7       	brne	.-8      	; 0xa4 <show_time+0x1e>
	uint8_t n1 = sec % 10;
	uint8_t n2 = sec / 10;
	
	PORTC = nums[n1];
  ac:	9d ec       	ldi	r25, 0xCD	; 205
  ae:	89 9f       	mul	r24, r25
  b0:	91 2d       	mov	r25, r1
  b2:	11 24       	eor	r1, r1
  b4:	96 95       	lsr	r25
  b6:	96 95       	lsr	r25
  b8:	96 95       	lsr	r25
  ba:	39 2f       	mov	r19, r25
  bc:	33 0f       	add	r19, r19
  be:	23 2f       	mov	r18, r19
  c0:	22 0f       	add	r18, r18
  c2:	22 0f       	add	r18, r18
  c4:	23 0f       	add	r18, r19
  c6:	82 1b       	sub	r24, r18
  c8:	e1 e0       	ldi	r30, 0x01	; 1
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ec 0f       	add	r30, r28
  ce:	fd 1f       	adc	r31, r29
  d0:	e8 0f       	add	r30, r24
  d2:	f1 1d       	adc	r31, r1
  d4:	80 81       	ld	r24, Z
  d6:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xFE;
  d8:	8e ef       	ldi	r24, 0xFE	; 254
  da:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	ef e1       	ldi	r30, 0x1F	; 31
  de:	fe e4       	ldi	r31, 0x4E	; 78
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <show_time+0x5a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <show_time+0x60>
  e6:	00 00       	nop
	_delay_ms(5);
	
	PORTC = nums[n2];
  e8:	e1 e0       	ldi	r30, 0x01	; 1
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	ec 0f       	add	r30, r28
  ee:	fd 1f       	adc	r31, r29
  f0:	e9 0f       	add	r30, r25
  f2:	f1 1d       	adc	r31, r1
  f4:	80 81       	ld	r24, Z
  f6:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xFD;
  f8:	8d ef       	ldi	r24, 0xFD	; 253
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	8f e1       	ldi	r24, 0x1F	; 31
  fe:	9e e4       	ldi	r25, 0x4E	; 78
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <show_time+0x7a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <show_time+0x80>
 106:	00 00       	nop
	_delay_ms(5);	
}
 108:	2a 96       	adiw	r28, 0x0a	; 10
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:

int main (void) {
	DDRA &= ~(1<<PA3);
 11a:	d3 98       	cbi	0x1a, 3	; 26
	DDRB &= ~(1<<PB3);
 11c:	bb 98       	cbi	0x17, 3	; 23
	
	ADC_init();
 11e:	ae df       	rcall	.-164    	; 0x7c <ADC_init>
	
	DDRC = 0xFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 124:	81 bb       	out	0x11, r24	; 17
	uint16_t max = 60;
		
	while(1) {
		//ADC_value = ADC_read();
		//uint16_t green_time = (((uint32_t)ADC_value * (max - min)) / 1023) + min;
		show_time(90);
 126:	8a e5       	ldi	r24, 0x5A	; 90
 128:	ae df       	rcall	.-164    	; 0x86 <show_time>
 12a:	fd cf       	rjmp	.-6      	; 0x126 <main+0xc>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
