
trafficLightGccBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800064  00800064  000002dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082a  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064c  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b4  00000000  00000000  0000121e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000650b  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023b  00000000  00000000  00007cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000228  00000000  00000000  00007f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	cc c0       	rjmp	.+408    	; 0x1b6 <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	ca d0       	rcall	.+404    	; 0x21c <main>
  88:	db c0       	rjmp	.+438    	; 0x240 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <ADC_init>:
	_delay_ms(1000);
	
	PORTC = nums[n2];
	PORTD = ~(1<<(seg_index+1));
	_delay_ms(1000);
}
  8c:	86 e8       	ldi	r24, 0x86	; 134
  8e:	86 b9       	out	0x06, r24	; 6
  90:	83 e6       	ldi	r24, 0x63	; 99
  92:	87 b9       	out	0x07, r24	; 7
  94:	08 95       	ret

00000096 <set_traffic_lights>:

void set_traffic_lights() {
	switch (light_state_main) {
  96:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	49 f0       	breq	.+18     	; 0xb0 <set_traffic_lights+0x1a>
  9e:	18 f0       	brcs	.+6      	; 0xa6 <set_traffic_lights+0x10>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	59 f0       	breq	.+22     	; 0xba <set_traffic_lights+0x24>
  a4:	0e c0       	rjmp	.+28     	; 0xc2 <set_traffic_lights+0x2c>
		case GREEN:
		PORTA = (PORTA | (1 << PA0)) & ~((1 << PA1) | (1 << PA2));
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	89 7f       	andi	r24, 0xF9	; 249
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	8b bb       	out	0x1b, r24	; 27
		break;
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <set_traffic_lights+0x2c>
		case YELLOW:
		PORTA = (PORTA | (1 << PA1)) & ~((1 << PA0) | (1 << PA2));
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8a 7f       	andi	r24, 0xFA	; 250
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8b bb       	out	0x1b, r24	; 27
		break;
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <set_traffic_lights+0x2c>
		case RED:
		PORTA = (PORTA | (1 << PA2)) & ~((1 << PA1) | (1 << PA0));
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	8c 7f       	andi	r24, 0xFC	; 252
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8b bb       	out	0x1b, r24	; 27
		break;
	}
	
	switch (light_state_sub) {
  c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	49 f0       	breq	.+18     	; 0xdc <set_traffic_lights+0x46>
  ca:	18 f0       	brcs	.+6      	; 0xd2 <set_traffic_lights+0x3c>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	59 f0       	breq	.+22     	; 0xe6 <set_traffic_lights+0x50>
  d0:	08 95       	ret
		case GREEN:
		PORTA = (PORTA | (1 << PA3)) & ~((1 << PA4) | (1 << PA5));
  d2:	8b b3       	in	r24, 0x1b	; 27
  d4:	8f 7c       	andi	r24, 0xCF	; 207
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	8b bb       	out	0x1b, r24	; 27
		break;
  da:	08 95       	ret
		case YELLOW:
		PORTA = (PORTA | (1 << PA4)) & ~((1 << PA3) | (1 << PA5));
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	87 7d       	andi	r24, 0xD7	; 215
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	8b bb       	out	0x1b, r24	; 27
		break;
  e4:	08 95       	ret
		case RED:
		PORTA = (PORTA | (1 << PA5)) & ~((1 << PA4) | (1 << PA3));
  e6:	8b b3       	in	r24, 0x1b	; 27
  e8:	87 7e       	andi	r24, 0xE7	; 231
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	08 95       	ret

000000f0 <update_traffic_lights_main>:
		break;
	}
}

void update_traffic_lights_main() {
	switch (light_state_main) {
  f0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	81 f0       	breq	.+32     	; 0x118 <update_traffic_lights_main+0x28>
  f8:	18 f0       	brcs	.+6      	; 0x100 <update_traffic_lights_main+0x10>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	c9 f0       	breq	.+50     	; 0x130 <update_traffic_lights_main+0x40>
  fe:	08 95       	ret
		case GREEN:
		if (sec_main == 0) {
 100:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sec_main>
 104:	81 11       	cpse	r24, r1
 106:	1e c0       	rjmp	.+60     	; 0x144 <update_traffic_lights_main+0x54>
			light_state_main = YELLOW;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
			sec_main = yellow_time;
 10e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <yellow_time>
 112:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sec_main>
 116:	08 95       	ret
		}
		break;
		case YELLOW:
		if (sec_main == 0) {
 118:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sec_main>
 11c:	81 11       	cpse	r24, r1
 11e:	12 c0       	rjmp	.+36     	; 0x144 <update_traffic_lights_main+0x54>
			light_state_main = RED;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
			sec_main = red_time;
 126:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <red_time>
 12a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sec_main>
 12e:	08 95       	ret
		}
		break;
		case RED:
		if (sec_main == 0) {
 130:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sec_main>
 134:	81 11       	cpse	r24, r1
 136:	06 c0       	rjmp	.+12     	; 0x144 <update_traffic_lights_main+0x54>
			light_state_main = GREEN;
 138:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
			sec_main = green_time;
 13c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <green_time>
 140:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sec_main>
 144:	08 95       	ret

00000146 <update_traffic_lights_sub>:
		break;
	}
}

void update_traffic_lights_sub() {
	switch (light_state_sub) {
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	81 f0       	breq	.+32     	; 0x16e <update_traffic_lights_sub+0x28>
 14e:	18 f0       	brcs	.+6      	; 0x156 <update_traffic_lights_sub+0x10>
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	c9 f0       	breq	.+50     	; 0x186 <update_traffic_lights_sub+0x40>
 154:	08 95       	ret
		case GREEN:
		if (sec_sub == 0) {
 156:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <sec_sub>
 15a:	81 11       	cpse	r24, r1
 15c:	1e c0       	rjmp	.+60     	; 0x19a <update_traffic_lights_sub+0x54>
			light_state_sub = YELLOW;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			sec_sub = yellow_time;
 164:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <yellow_time>
 168:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sec_sub>
 16c:	08 95       	ret
		}
		break;
		case YELLOW:
		if (sec_sub == 0) {
 16e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <sec_sub>
 172:	81 11       	cpse	r24, r1
 174:	12 c0       	rjmp	.+36     	; 0x19a <update_traffic_lights_sub+0x54>
			light_state_sub = RED;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			sec_sub = red_time;
 17c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <red_time>
 180:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sec_sub>
 184:	08 95       	ret
		}
		break;
		case RED:
		if (sec_sub == 0) {
 186:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <sec_sub>
 18a:	81 11       	cpse	r24, r1
 18c:	06 c0       	rjmp	.+12     	; 0x19a <update_traffic_lights_sub+0x54>
			light_state_sub = GREEN;
 18e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			sec_sub = green_time;
 192:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <green_time>
 196:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sec_sub>
 19a:	08 95       	ret

0000019c <init_timer1>:
		break;
	}
}

void init_timer1() {
	TCNT1 = 0;
 19c:	1d bc       	out	0x2d, r1	; 45
 19e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 15624;
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	9d e3       	ldi	r25, 0x3D	; 61
 1a4:	9b bd       	out	0x2b, r25	; 43
 1a6:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0x00;
 1a8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC mode, prescaler 1024
 1aa:	8d e0       	ldi	r24, 0x0D	; 13
 1ac:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1A); // Enable Timer1 compare interrupt
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	89 bf       	out	0x39, r24	; 57
	sei(); // Enable global interrupts
 1b2:	78 94       	sei
 1b4:	08 95       	ret

000001b6 <__vector_7>:
}

ISR(TIMER1_COMPA_vect) {
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	if (sec_main > 0) {
 1d8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <sec_main>
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <__vector_7+0x30>
		sec_main--;
 1e0:	81 50       	subi	r24, 0x01	; 1
 1e2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sec_main>
	}
	update_traffic_lights_main();

	if (sec_sub > 0) {
 1e6:	84 df       	rcall	.-248    	; 0xf0 <update_traffic_lights_main>
 1e8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <sec_sub>
 1ec:	88 23       	and	r24, r24
		sec_sub--;
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <__vector_7+0x40>
	}
	update_traffic_lights_sub();
 1f0:	81 50       	subi	r24, 0x01	; 1

	set_traffic_lights(); // Update lights in each ISR call
 1f2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sec_sub>
}
 1f6:	a7 df       	rcall	.-178    	; 0x146 <update_traffic_lights_sub>
 1f8:	4e df       	rcall	.-356    	; 0x96 <set_traffic_lights>
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:

int main (void) {
	DDRA = 0x3F; // Set PORTA pins 0-5 as outputs for traffic lights
 21c:	8f e3       	ldi	r24, 0x3F	; 63
 21e:	8a bb       	out	0x1a, r24	; 26
	DDRB &= ~(1<<PB3); // PB3 as input (for ADC)

	ADC_init();
	init_timer1();
 220:	bb 98       	cbi	0x17, 3	; 23
 222:	34 df       	rcall	.-408    	; 0x8c <ADC_init>
	
	DDRC = 0xFF; // Set PORTC as output for 7-segment display
 224:	bb df       	rcall	.-138    	; 0x19c <init_timer1>
 226:	8f ef       	ldi	r24, 0xFF	; 255
	DDRD = 0xFF; // Set PORTD as output for 7-segment display control
 228:	84 bb       	out	0x14, r24	; 20
	
	sec_main = green_time; // Initialize main sec with green_time
 22a:	81 bb       	out	0x11, r24	; 17
 22c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <green_time>
 230:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <sec_main>
	sec_sub = red_time;    // Initialize sub sec with red_time
 234:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <red_time>
	set_traffic_lights(); // Set initial traffic lights
 238:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <sec_sub>
 23c:	2c df       	rcall	.-424    	; 0x96 <set_traffic_lights>
 23e:	ff cf       	rjmp	.-2      	; 0x23e <main+0x22>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
