
trafficLightGccBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000007ac  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006c  0080006c  0000084c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f6  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000690  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000506  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006559  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000029c  00000000  00000000  000083f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008695  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000228  00000000  00000000  000086e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3b c1       	rjmp	.+630    	; 0x294 <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	39 d1       	rcall	.+626    	; 0x2fa <main>
  88:	8f c3       	rjmp	.+1822   	; 0x7a8 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <ADC_init>:
enum State {GREEN, YELLOW, RED};
uint8_t light_state_main = GREEN;
uint8_t light_state_sub = RED;

void ADC_init() {
	ADCSRA = 0x87;
  8c:	87 e8       	ldi	r24, 0x87	; 135
  8e:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x46;
  90:	86 e4       	ldi	r24, 0x46	; 70
  92:	87 b9       	out	0x07, r24	; 7
  94:	08 95       	ret

00000096 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  96:	97 b1       	in	r25, 0x07	; 7
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	89 2b       	or	r24, r25
  9e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADIF));
  a2:	34 99       	sbic	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <ADC_read+0xc>
	ADCSRA |= (1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  a8:	84 b1       	in	r24, 0x04	; 4
  aa:	95 b1       	in	r25, 0x05	; 5
}
  ac:	08 95       	ret

000000ae <show_time>:

void show_time(uint8_t sec, uint8_t seg_index) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2a 97       	sbiw	r28, 0x0a	; 10
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
	uint8_t nums[] = {
  c2:	9a e0       	ldi	r25, 0x0A	; 10
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	9a 95       	dec	r25
  d2:	e1 f7       	brne	.-8      	; 0xcc <show_time+0x1e>
	};
	
	uint8_t n1 = sec % 10;
	uint8_t n2 = sec / 10;
	
	PORTC = nums[n1];
  d4:	2d ec       	ldi	r18, 0xCD	; 205
  d6:	82 9f       	mul	r24, r18
  d8:	21 2d       	mov	r18, r1
  da:	11 24       	eor	r1, r1
  dc:	26 95       	lsr	r18
  de:	26 95       	lsr	r18
  e0:	26 95       	lsr	r18
  e2:	32 2f       	mov	r19, r18
  e4:	33 0f       	add	r19, r19
  e6:	93 2f       	mov	r25, r19
  e8:	99 0f       	add	r25, r25
  ea:	99 0f       	add	r25, r25
  ec:	93 0f       	add	r25, r19
  ee:	89 1b       	sub	r24, r25
  f0:	e1 e0       	ldi	r30, 0x01	; 1
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	e8 0f       	add	r30, r24
  fa:	f1 1d       	adc	r31, r1
  fc:	80 81       	ld	r24, Z
  fe:	85 bb       	out	0x15, r24	; 21
	PORTD = ~(1<<seg_index);
 100:	46 2f       	mov	r20, r22
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	02 c0       	rjmp	.+4      	; 0x110 <show_time+0x62>
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <show_time+0x5e>
 114:	bf 01       	movw	r22, r30
 116:	60 95       	com	r22
 118:	62 bb       	out	0x12, r22	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	ff e3       	ldi	r31, 0x3F	; 63
 11c:	3d e0       	ldi	r19, 0x0D	; 13
 11e:	63 e0       	ldi	r22, 0x03	; 3
 120:	f1 50       	subi	r31, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	60 40       	sbci	r22, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <show_time+0x72>
 128:	00 c0       	rjmp	.+0      	; 0x12a <show_time+0x7c>
 12a:	00 00       	nop
	_delay_ms(1000);
	
	PORTC = nums[n2];
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ec 0f       	add	r30, r28
 132:	fd 1f       	adc	r31, r29
 134:	e2 0f       	add	r30, r18
 136:	f1 1d       	adc	r31, r1
 138:	20 81       	ld	r18, Z
 13a:	25 bb       	out	0x15, r18	; 21
	PORTD = ~(1<<(seg_index+1));
 13c:	9a 01       	movw	r18, r20
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	02 c0       	rjmp	.+4      	; 0x148 <show_time+0x9a>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <show_time+0x96>
 14c:	80 95       	com	r24
 14e:	82 bb       	out	0x12, r24	; 18
 150:	7f e3       	ldi	r23, 0x3F	; 63
 152:	8d e0       	ldi	r24, 0x0D	; 13
 154:	93 e0       	ldi	r25, 0x03	; 3
 156:	71 50       	subi	r23, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <show_time+0xa8>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <show_time+0xb2>
 160:	00 00       	nop
	_delay_ms(1000);
}
 162:	2a 96       	adiw	r28, 0x0a	; 10
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <set_traffic_lights>:

void set_traffic_lights() {
	switch (light_state_main) {
 174:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 178:	81 30       	cpi	r24, 0x01	; 1
 17a:	49 f0       	breq	.+18     	; 0x18e <set_traffic_lights+0x1a>
 17c:	18 f0       	brcs	.+6      	; 0x184 <set_traffic_lights+0x10>
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	59 f0       	breq	.+22     	; 0x198 <set_traffic_lights+0x24>
 182:	0e c0       	rjmp	.+28     	; 0x1a0 <set_traffic_lights+0x2c>
		case GREEN:
		PORTA = (PORTA | (1 << PA0)) & ~((1 << PA1) | (1 << PA2));
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	89 7f       	andi	r24, 0xF9	; 249
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	8b bb       	out	0x1b, r24	; 27
		break;
 18c:	09 c0       	rjmp	.+18     	; 0x1a0 <set_traffic_lights+0x2c>
		case YELLOW:
		PORTA = (PORTA | (1 << PA1)) & ~((1 << PA0) | (1 << PA2));
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8a 7f       	andi	r24, 0xFA	; 250
 192:	82 60       	ori	r24, 0x02	; 2
 194:	8b bb       	out	0x1b, r24	; 27
		break;
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <set_traffic_lights+0x2c>
		case RED:
		PORTA = (PORTA | (1 << PA2)) & ~((1 << PA1) | (1 << PA0));
 198:	8b b3       	in	r24, 0x1b	; 27
 19a:	8c 7f       	andi	r24, 0xFC	; 252
 19c:	84 60       	ori	r24, 0x04	; 4
 19e:	8b bb       	out	0x1b, r24	; 27
		break;
	}
	
	switch (light_state_sub) {
 1a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	49 f0       	breq	.+18     	; 0x1ba <set_traffic_lights+0x46>
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <set_traffic_lights+0x3c>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	59 f0       	breq	.+22     	; 0x1c4 <set_traffic_lights+0x50>
 1ae:	08 95       	ret
		case GREEN:
		PORTA = (PORTA | (1 << PA3)) & ~((1 << PA4) | (1 << PA5));
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	8f 7c       	andi	r24, 0xCF	; 207
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	8b bb       	out	0x1b, r24	; 27
		break;
 1b8:	08 95       	ret
		case YELLOW:
		PORTA = (PORTA | (1 << PA4)) & ~((1 << PA3) | (1 << PA5));
 1ba:	8b b3       	in	r24, 0x1b	; 27
 1bc:	87 7d       	andi	r24, 0xD7	; 215
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	8b bb       	out	0x1b, r24	; 27
		break;
 1c2:	08 95       	ret
		case RED:
		PORTA = (PORTA | (1 << PA5)) & ~((1 << PA4) | (1 << PA3));
 1c4:	8b b3       	in	r24, 0x1b	; 27
 1c6:	87 7e       	andi	r24, 0xE7	; 231
 1c8:	80 62       	ori	r24, 0x20	; 32
 1ca:	8b bb       	out	0x1b, r24	; 27
 1cc:	08 95       	ret

000001ce <update_traffic_lights_main>:
		break;
	}
}

void update_traffic_lights_main() {
	switch (light_state_main) {
 1ce:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	81 f0       	breq	.+32     	; 0x1f6 <update_traffic_lights_main+0x28>
 1d6:	18 f0       	brcs	.+6      	; 0x1de <update_traffic_lights_main+0x10>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	c9 f0       	breq	.+50     	; 0x20e <update_traffic_lights_main+0x40>
 1dc:	08 95       	ret
		case GREEN:
		if (sec_main == 0) {
 1de:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 1e2:	81 11       	cpse	r24, r1
 1e4:	1e c0       	rjmp	.+60     	; 0x222 <update_traffic_lights_main+0x54>
			light_state_main = YELLOW;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			sec_main = yellow_time;
 1ec:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <yellow_time>
 1f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 1f4:	08 95       	ret
		}
		break;
		case YELLOW:
		if (sec_main == 0) {
 1f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 1fa:	81 11       	cpse	r24, r1
 1fc:	12 c0       	rjmp	.+36     	; 0x222 <update_traffic_lights_main+0x54>
			light_state_main = RED;
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			sec_main = red_time;
 204:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <red_time>
 208:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 20c:	08 95       	ret
		}
		break;
		case RED:
		if (sec_main == 0) {
 20e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 212:	81 11       	cpse	r24, r1
 214:	06 c0       	rjmp	.+12     	; 0x222 <update_traffic_lights_main+0x54>
			light_state_main = GREEN;
 216:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
			sec_main = green_time;
 21a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <green_time>
 21e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
 222:	08 95       	ret

00000224 <update_traffic_lights_sub>:
		break;
	}
}

void update_traffic_lights_sub() {
	switch (light_state_sub) {
 224:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	81 f0       	breq	.+32     	; 0x24c <update_traffic_lights_sub+0x28>
 22c:	18 f0       	brcs	.+6      	; 0x234 <update_traffic_lights_sub+0x10>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	c9 f0       	breq	.+50     	; 0x264 <update_traffic_lights_sub+0x40>
 232:	08 95       	ret
		case GREEN:
		if (sec_sub == 0) {
 234:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 238:	81 11       	cpse	r24, r1
 23a:	1e c0       	rjmp	.+60     	; 0x278 <update_traffic_lights_sub+0x54>
			light_state_sub = YELLOW;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			sec_sub = yellow_time;
 242:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <yellow_time>
 246:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 24a:	08 95       	ret
		}
		break;
		case YELLOW:
		if (sec_sub == 0) {
 24c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 250:	81 11       	cpse	r24, r1
 252:	12 c0       	rjmp	.+36     	; 0x278 <update_traffic_lights_sub+0x54>
			light_state_sub = RED;
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			sec_sub = red_time;
 25a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <red_time>
 25e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 262:	08 95       	ret
		}
		break;
		case RED:
		if (sec_sub == 0) {
 264:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 268:	81 11       	cpse	r24, r1
 26a:	06 c0       	rjmp	.+12     	; 0x278 <update_traffic_lights_sub+0x54>
			light_state_sub = GREEN;
 26c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			sec_sub = green_time;
 270:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <green_time>
 274:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 278:	08 95       	ret

0000027a <init_timer1>:
		break;
	}
}

void init_timer1() {
	TCNT1 = 0;
 27a:	1d bc       	out	0x2d, r1	; 45
 27c:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 15624;
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	9d e3       	ldi	r25, 0x3D	; 61
 282:	9b bd       	out	0x2b, r25	; 43
 284:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = 0x00;
 286:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10); // CTC mode, prescaler 1024
 288:	8d e0       	ldi	r24, 0x0D	; 13
 28a:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1A);
 28c:	80 e1       	ldi	r24, 0x10	; 16
 28e:	89 bf       	out	0x39, r24	; 57
	sei();
 290:	78 94       	sei
 292:	08 95       	ret

00000294 <__vector_7>:
}

ISR(TIMER1_COMPA_vect) {
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	
	if (sec_main > 0) {
 2b6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 2ba:	88 23       	and	r24, r24
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <__vector_7+0x30>
		sec_main--;
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
	}
	update_traffic_lights_main();

	if (sec_sub > 0) {
 2c4:	84 df       	rcall	.-248    	; 0x1ce <update_traffic_lights_main>
 2c6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 2ca:	88 23       	and	r24, r24
		sec_sub--;
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <__vector_7+0x40>
	}
	update_traffic_lights_sub();
 2ce:	81 50       	subi	r24, 0x01	; 1
	
	set_traffic_lights();
 2d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
}
 2d4:	a7 df       	rcall	.-178    	; 0x224 <update_traffic_lights_sub>
 2d6:	4e df       	rcall	.-356    	; 0x174 <set_traffic_lights>
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <main>:

int main (void) {
	
	DDRA = 0x3F;
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~((1 << PA6) | (1 << PA7));
 2fe:	8b b3       	in	r24, 0x1b	; 27
 300:	8f 73       	andi	r24, 0x3F	; 63
 302:	8b bb       	out	0x1b, r24	; 27
	
	DDRB &= ~(1<<PB3);
 304:	bb 98       	cbi	0x17, 3	; 23
	DDRC = 0xFF;
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;

	ADC_init();
	init_timer1();
 30a:	81 bb       	out	0x11, r24	; 17
 30c:	bf de       	rcall	.-642    	; 0x8c <ADC_init>
	
	sec_main = green_time;
 30e:	b5 df       	rcall	.-150    	; 0x27a <init_timer1>
 310:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <green_time>
 314:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <sec_main>
	sec_sub = red_time;
 318:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <red_time>
	
	char buffer[100];
	
	while(1) {
		
		adc_green = ADC_read(6);
 31c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec_sub>
 320:	29 df       	rcall	.-430    	; 0x174 <set_traffic_lights>
		adc_yellow = ADC_read(7);
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	b8 de       	rcall	.-656    	; 0x96 <ADC_read>
 326:	8c 01       	movw	r16, r24
 328:	87 e0       	ldi	r24, 0x07	; 7
		
		green_time = ((uint32_t)(adc_green) * (max_green - min_green)) / 1023.0 + min_green;	
 32a:	b5 de       	rcall	.-662    	; 0x96 <ADC_read>
 32c:	ec 01       	movw	r28, r24
 32e:	c8 01       	movw	r24, r16
 330:	a0 e0       	ldi	r26, 0x00	; 0
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	ac 01       	movw	r20, r24
 346:	bd 01       	movw	r22, r26
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	66 1f       	adc	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	8c 01       	movw	r16, r24
 35a:	9d 01       	movw	r18, r26
 35c:	04 0f       	add	r16, r20
 35e:	15 1f       	adc	r17, r21
 360:	26 1f       	adc	r18, r22
 362:	37 1f       	adc	r19, r23
 364:	c9 01       	movw	r24, r18
 366:	b8 01       	movw	r22, r16
 368:	2e d1       	rcall	.+604    	; 0x5c6 <__floatunsisf>
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 ec       	ldi	r19, 0xC0	; 192
 36e:	4f e7       	ldi	r20, 0x7F	; 127
 370:	54 e4       	ldi	r21, 0x44	; 68
 372:	95 d0       	rcall	.+298    	; 0x49e <__divsf3>
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	40 e2       	ldi	r20, 0x20	; 32
 37a:	52 e4       	ldi	r21, 0x42	; 66
 37c:	2c d0       	rcall	.+88     	; 0x3d6 <__addsf3>
		yellow_time = ((uint32_t)(adc_yellow) * (max_yellow - min_yellow)) / 1023.0 + min_yellow;
 37e:	f7 d0       	rcall	.+494    	; 0x56e <__fixunssfsi>
 380:	16 2f       	mov	r17, r22
 382:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <green_time>
 386:	be 01       	movw	r22, r28
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	1c d1       	rcall	.+568    	; 0x5c6 <__floatunsisf>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 ec       	ldi	r19, 0xC0	; 192
 392:	4f e7       	ldi	r20, 0x7F	; 127
 394:	54 e4       	ldi	r21, 0x44	; 68
 396:	83 d0       	rcall	.+262    	; 0x49e <__divsf3>
 398:	20 e0       	ldi	r18, 0x00	; 0
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	40 e8       	ldi	r20, 0x80	; 128
		red_time = 0.75 * green_time;
 39e:	5f e3       	ldi	r21, 0x3F	; 63
 3a0:	1a d0       	rcall	.+52     	; 0x3d6 <__addsf3>
 3a2:	e5 d0       	rcall	.+458    	; 0x56e <__fixunssfsi>
 3a4:	60 93 71 00 	sts	0x0071, r22	; 0x800071 <yellow_time>
 3a8:	61 2f       	mov	r22, r17
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0c d1       	rcall	.+536    	; 0x5ca <__floatsisf>
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	40 e4       	ldi	r20, 0x40	; 64
 3b8:	5f e3       	ldi	r21, 0x3F	; 63
				
		show_time(sec_main, 0);
 3ba:	93 d1       	rcall	.+806    	; 0x6e2 <__mulsf3>
 3bc:	d8 d0       	rcall	.+432    	; 0x56e <__fixunssfsi>
 3be:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <red_time>
 3c2:	60 e0       	ldi	r22, 0x00	; 0
		show_time(sec_sub, 2);
 3c4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sec_main>
 3c8:	72 de       	rcall	.-796    	; 0xae <show_time>
 3ca:	62 e0       	ldi	r22, 0x02	; 2
 3cc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec_sub>
 3d0:	6e de       	rcall	.-804    	; 0xae <show_time>
 3d2:	a7 cf       	rjmp	.-178    	; 0x322 <main+0x28>

000003d4 <__subsf3>:
 3d4:	50 58       	subi	r21, 0x80	; 128

000003d6 <__addsf3>:
 3d6:	bb 27       	eor	r27, r27
 3d8:	aa 27       	eor	r26, r26
 3da:	0e d0       	rcall	.+28     	; 0x3f8 <__addsf3x>
 3dc:	48 c1       	rjmp	.+656    	; 0x66e <__fp_round>
 3de:	39 d1       	rcall	.+626    	; 0x652 <__fp_pscA>
 3e0:	30 f0       	brcs	.+12     	; 0x3ee <__addsf3+0x18>
 3e2:	3e d1       	rcall	.+636    	; 0x660 <__fp_pscB>
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__addsf3+0x18>
 3e6:	31 f4       	brne	.+12     	; 0x3f4 <__addsf3+0x1e>
 3e8:	9f 3f       	cpi	r25, 0xFF	; 255
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <__addsf3+0x1a>
 3ec:	1e f4       	brtc	.+6      	; 0x3f4 <__addsf3+0x1e>
 3ee:	2e c1       	rjmp	.+604    	; 0x64c <__fp_nan>
 3f0:	0e f4       	brtc	.+2      	; 0x3f4 <__addsf3+0x1e>
 3f2:	e0 95       	com	r30
 3f4:	e7 fb       	bst	r30, 7
 3f6:	24 c1       	rjmp	.+584    	; 0x640 <__fp_inf>

000003f8 <__addsf3x>:
 3f8:	e9 2f       	mov	r30, r25
 3fa:	4a d1       	rcall	.+660    	; 0x690 <__fp_split3>
 3fc:	80 f3       	brcs	.-32     	; 0x3de <__addsf3+0x8>
 3fe:	ba 17       	cp	r27, r26
 400:	62 07       	cpc	r22, r18
 402:	73 07       	cpc	r23, r19
 404:	84 07       	cpc	r24, r20
 406:	95 07       	cpc	r25, r21
 408:	18 f0       	brcs	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	71 f4       	brne	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 40c:	9e f5       	brtc	.+102    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 40e:	62 c1       	rjmp	.+708    	; 0x6d4 <__fp_zero>
 410:	0e f4       	brtc	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	e0 95       	com	r30
 414:	0b 2e       	mov	r0, r27
 416:	ba 2f       	mov	r27, r26
 418:	a0 2d       	mov	r26, r0
 41a:	0b 01       	movw	r0, r22
 41c:	b9 01       	movw	r22, r18
 41e:	90 01       	movw	r18, r0
 420:	0c 01       	movw	r0, r24
 422:	ca 01       	movw	r24, r20
 424:	a0 01       	movw	r20, r0
 426:	11 24       	eor	r1, r1
 428:	ff 27       	eor	r31, r31
 42a:	59 1b       	sub	r21, r25
 42c:	99 f0       	breq	.+38     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42e:	59 3f       	cpi	r21, 0xF9	; 249
 430:	50 f4       	brcc	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 432:	50 3e       	cpi	r21, 0xE0	; 224
 434:	68 f1       	brcs	.+90     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 436:	1a 16       	cp	r1, r26
 438:	f0 40       	sbci	r31, 0x00	; 0
 43a:	a2 2f       	mov	r26, r18
 43c:	23 2f       	mov	r18, r19
 43e:	34 2f       	mov	r19, r20
 440:	44 27       	eor	r20, r20
 442:	58 5f       	subi	r21, 0xF8	; 248
 444:	f3 cf       	rjmp	.-26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 446:	46 95       	lsr	r20
 448:	37 95       	ror	r19
 44a:	27 95       	ror	r18
 44c:	a7 95       	ror	r26
 44e:	f0 40       	sbci	r31, 0x00	; 0
 450:	53 95       	inc	r21
 452:	c9 f7       	brne	.-14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 454:	7e f4       	brtc	.+30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 456:	1f 16       	cp	r1, r31
 458:	ba 0b       	sbc	r27, r26
 45a:	62 0b       	sbc	r22, r18
 45c:	73 0b       	sbc	r23, r19
 45e:	84 0b       	sbc	r24, r20
 460:	ba f0       	brmi	.+46     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 462:	91 50       	subi	r25, 0x01	; 1
 464:	a1 f0       	breq	.+40     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 466:	ff 0f       	add	r31, r31
 468:	bb 1f       	adc	r27, r27
 46a:	66 1f       	adc	r22, r22
 46c:	77 1f       	adc	r23, r23
 46e:	88 1f       	adc	r24, r24
 470:	c2 f7       	brpl	.-16     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 472:	0e c0       	rjmp	.+28     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 474:	ba 0f       	add	r27, r26
 476:	62 1f       	adc	r22, r18
 478:	73 1f       	adc	r23, r19
 47a:	84 1f       	adc	r24, r20
 47c:	48 f4       	brcc	.+18     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 47e:	87 95       	ror	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b7 95       	ror	r27
 486:	f7 95       	ror	r31
 488:	9e 3f       	cpi	r25, 0xFE	; 254
 48a:	08 f0       	brcs	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	b3 cf       	rjmp	.-154    	; 0x3f4 <__addsf3+0x1e>
 48e:	93 95       	inc	r25
 490:	88 0f       	add	r24, r24
 492:	08 f0       	brcs	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	99 27       	eor	r25, r25
 496:	ee 0f       	add	r30, r30
 498:	97 95       	ror	r25
 49a:	87 95       	ror	r24
 49c:	08 95       	ret

0000049e <__divsf3>:
 49e:	0c d0       	rcall	.+24     	; 0x4b8 <__divsf3x>
 4a0:	e6 c0       	rjmp	.+460    	; 0x66e <__fp_round>
 4a2:	de d0       	rcall	.+444    	; 0x660 <__fp_pscB>
 4a4:	40 f0       	brcs	.+16     	; 0x4b6 <__divsf3+0x18>
 4a6:	d5 d0       	rcall	.+426    	; 0x652 <__fp_pscA>
 4a8:	30 f0       	brcs	.+12     	; 0x4b6 <__divsf3+0x18>
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__divsf3+0x16>
 4ac:	5f 3f       	cpi	r21, 0xFF	; 255
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <__divsf3+0x18>
 4b0:	c7 c0       	rjmp	.+398    	; 0x640 <__fp_inf>
 4b2:	51 11       	cpse	r21, r1
 4b4:	10 c1       	rjmp	.+544    	; 0x6d6 <__fp_szero>
 4b6:	ca c0       	rjmp	.+404    	; 0x64c <__fp_nan>

000004b8 <__divsf3x>:
 4b8:	eb d0       	rcall	.+470    	; 0x690 <__fp_split3>
 4ba:	98 f3       	brcs	.-26     	; 0x4a2 <__divsf3+0x4>

000004bc <__divsf3_pse>:
 4bc:	99 23       	and	r25, r25
 4be:	c9 f3       	breq	.-14     	; 0x4b2 <__divsf3+0x14>
 4c0:	55 23       	and	r21, r21
 4c2:	b1 f3       	breq	.-20     	; 0x4b0 <__divsf3+0x12>
 4c4:	95 1b       	sub	r25, r21
 4c6:	55 0b       	sbc	r21, r21
 4c8:	bb 27       	eor	r27, r27
 4ca:	aa 27       	eor	r26, r26
 4cc:	62 17       	cp	r22, r18
 4ce:	73 07       	cpc	r23, r19
 4d0:	84 07       	cpc	r24, r20
 4d2:	38 f0       	brcs	.+14     	; 0x4e2 <__divsf3_pse+0x26>
 4d4:	9f 5f       	subi	r25, 0xFF	; 255
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	44 1f       	adc	r20, r20
 4de:	aa 1f       	adc	r26, r26
 4e0:	a9 f3       	breq	.-22     	; 0x4cc <__divsf3_pse+0x10>
 4e2:	33 d0       	rcall	.+102    	; 0x54a <__divsf3_pse+0x8e>
 4e4:	0e 2e       	mov	r0, r30
 4e6:	3a f0       	brmi	.+14     	; 0x4f6 <__divsf3_pse+0x3a>
 4e8:	e0 e8       	ldi	r30, 0x80	; 128
 4ea:	30 d0       	rcall	.+96     	; 0x54c <__divsf3_pse+0x90>
 4ec:	91 50       	subi	r25, 0x01	; 1
 4ee:	50 40       	sbci	r21, 0x00	; 0
 4f0:	e6 95       	lsr	r30
 4f2:	00 1c       	adc	r0, r0
 4f4:	ca f7       	brpl	.-14     	; 0x4e8 <__divsf3_pse+0x2c>
 4f6:	29 d0       	rcall	.+82     	; 0x54a <__divsf3_pse+0x8e>
 4f8:	fe 2f       	mov	r31, r30
 4fa:	27 d0       	rcall	.+78     	; 0x54a <__divsf3_pse+0x8e>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	88 1f       	adc	r24, r24
 502:	bb 1f       	adc	r27, r27
 504:	26 17       	cp	r18, r22
 506:	37 07       	cpc	r19, r23
 508:	48 07       	cpc	r20, r24
 50a:	ab 07       	cpc	r26, r27
 50c:	b0 e8       	ldi	r27, 0x80	; 128
 50e:	09 f0       	breq	.+2      	; 0x512 <__divsf3_pse+0x56>
 510:	bb 0b       	sbc	r27, r27
 512:	80 2d       	mov	r24, r0
 514:	bf 01       	movw	r22, r30
 516:	ff 27       	eor	r31, r31
 518:	93 58       	subi	r25, 0x83	; 131
 51a:	5f 4f       	sbci	r21, 0xFF	; 255
 51c:	2a f0       	brmi	.+10     	; 0x528 <__divsf3_pse+0x6c>
 51e:	9e 3f       	cpi	r25, 0xFE	; 254
 520:	51 05       	cpc	r21, r1
 522:	68 f0       	brcs	.+26     	; 0x53e <__divsf3_pse+0x82>
 524:	8d c0       	rjmp	.+282    	; 0x640 <__fp_inf>
 526:	d7 c0       	rjmp	.+430    	; 0x6d6 <__fp_szero>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	ec f3       	brlt	.-6      	; 0x526 <__divsf3_pse+0x6a>
 52c:	98 3e       	cpi	r25, 0xE8	; 232
 52e:	dc f3       	brlt	.-10     	; 0x526 <__divsf3_pse+0x6a>
 530:	86 95       	lsr	r24
 532:	77 95       	ror	r23
 534:	67 95       	ror	r22
 536:	b7 95       	ror	r27
 538:	f7 95       	ror	r31
 53a:	9f 5f       	subi	r25, 0xFF	; 255
 53c:	c9 f7       	brne	.-14     	; 0x530 <__divsf3_pse+0x74>
 53e:	88 0f       	add	r24, r24
 540:	91 1d       	adc	r25, r1
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	97 f9       	bld	r25, 7
 548:	08 95       	ret
 54a:	e1 e0       	ldi	r30, 0x01	; 1
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	bb 1f       	adc	r27, r27
 554:	62 17       	cp	r22, r18
 556:	73 07       	cpc	r23, r19
 558:	84 07       	cpc	r24, r20
 55a:	ba 07       	cpc	r27, r26
 55c:	20 f0       	brcs	.+8      	; 0x566 <__divsf3_pse+0xaa>
 55e:	62 1b       	sub	r22, r18
 560:	73 0b       	sbc	r23, r19
 562:	84 0b       	sbc	r24, r20
 564:	ba 0b       	sbc	r27, r26
 566:	ee 1f       	adc	r30, r30
 568:	88 f7       	brcc	.-30     	; 0x54c <__divsf3_pse+0x90>
 56a:	e0 95       	com	r30
 56c:	08 95       	ret

0000056e <__fixunssfsi>:
 56e:	98 d0       	rcall	.+304    	; 0x6a0 <__fp_splitA>
 570:	88 f0       	brcs	.+34     	; 0x594 <__fixunssfsi+0x26>
 572:	9f 57       	subi	r25, 0x7F	; 127
 574:	90 f0       	brcs	.+36     	; 0x59a <__fixunssfsi+0x2c>
 576:	b9 2f       	mov	r27, r25
 578:	99 27       	eor	r25, r25
 57a:	b7 51       	subi	r27, 0x17	; 23
 57c:	a0 f0       	brcs	.+40     	; 0x5a6 <__fixunssfsi+0x38>
 57e:	d1 f0       	breq	.+52     	; 0x5b4 <__fixunssfsi+0x46>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	1a f0       	brmi	.+6      	; 0x590 <__fixunssfsi+0x22>
 58a:	ba 95       	dec	r27
 58c:	c9 f7       	brne	.-14     	; 0x580 <__fixunssfsi+0x12>
 58e:	12 c0       	rjmp	.+36     	; 0x5b4 <__fixunssfsi+0x46>
 590:	b1 30       	cpi	r27, 0x01	; 1
 592:	81 f0       	breq	.+32     	; 0x5b4 <__fixunssfsi+0x46>
 594:	9f d0       	rcall	.+318    	; 0x6d4 <__fp_zero>
 596:	b1 e0       	ldi	r27, 0x01	; 1
 598:	08 95       	ret
 59a:	9c c0       	rjmp	.+312    	; 0x6d4 <__fp_zero>
 59c:	67 2f       	mov	r22, r23
 59e:	78 2f       	mov	r23, r24
 5a0:	88 27       	eor	r24, r24
 5a2:	b8 5f       	subi	r27, 0xF8	; 248
 5a4:	39 f0       	breq	.+14     	; 0x5b4 <__fixunssfsi+0x46>
 5a6:	b9 3f       	cpi	r27, 0xF9	; 249
 5a8:	cc f3       	brlt	.-14     	; 0x59c <__fixunssfsi+0x2e>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b3 95       	inc	r27
 5b2:	d9 f7       	brne	.-10     	; 0x5aa <__fixunssfsi+0x3c>
 5b4:	3e f4       	brtc	.+14     	; 0x5c4 <__fixunssfsi+0x56>
 5b6:	90 95       	com	r25
 5b8:	80 95       	com	r24
 5ba:	70 95       	com	r23
 5bc:	61 95       	neg	r22
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	08 95       	ret

000005c6 <__floatunsisf>:
 5c6:	e8 94       	clt
 5c8:	09 c0       	rjmp	.+18     	; 0x5dc <__floatsisf+0x12>

000005ca <__floatsisf>:
 5ca:	97 fb       	bst	r25, 7
 5cc:	3e f4       	brtc	.+14     	; 0x5dc <__floatsisf+0x12>
 5ce:	90 95       	com	r25
 5d0:	80 95       	com	r24
 5d2:	70 95       	com	r23
 5d4:	61 95       	neg	r22
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	99 23       	and	r25, r25
 5de:	a9 f0       	breq	.+42     	; 0x60a <__floatsisf+0x40>
 5e0:	f9 2f       	mov	r31, r25
 5e2:	96 e9       	ldi	r25, 0x96	; 150
 5e4:	bb 27       	eor	r27, r27
 5e6:	93 95       	inc	r25
 5e8:	f6 95       	lsr	r31
 5ea:	87 95       	ror	r24
 5ec:	77 95       	ror	r23
 5ee:	67 95       	ror	r22
 5f0:	b7 95       	ror	r27
 5f2:	f1 11       	cpse	r31, r1
 5f4:	f8 cf       	rjmp	.-16     	; 0x5e6 <__floatsisf+0x1c>
 5f6:	fa f4       	brpl	.+62     	; 0x636 <__floatsisf+0x6c>
 5f8:	bb 0f       	add	r27, r27
 5fa:	11 f4       	brne	.+4      	; 0x600 <__floatsisf+0x36>
 5fc:	60 ff       	sbrs	r22, 0
 5fe:	1b c0       	rjmp	.+54     	; 0x636 <__floatsisf+0x6c>
 600:	6f 5f       	subi	r22, 0xFF	; 255
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	16 c0       	rjmp	.+44     	; 0x636 <__floatsisf+0x6c>
 60a:	88 23       	and	r24, r24
 60c:	11 f0       	breq	.+4      	; 0x612 <__floatsisf+0x48>
 60e:	96 e9       	ldi	r25, 0x96	; 150
 610:	11 c0       	rjmp	.+34     	; 0x634 <__floatsisf+0x6a>
 612:	77 23       	and	r23, r23
 614:	21 f0       	breq	.+8      	; 0x61e <__floatsisf+0x54>
 616:	9e e8       	ldi	r25, 0x8E	; 142
 618:	87 2f       	mov	r24, r23
 61a:	76 2f       	mov	r23, r22
 61c:	05 c0       	rjmp	.+10     	; 0x628 <__floatsisf+0x5e>
 61e:	66 23       	and	r22, r22
 620:	71 f0       	breq	.+28     	; 0x63e <__floatsisf+0x74>
 622:	96 e8       	ldi	r25, 0x86	; 134
 624:	86 2f       	mov	r24, r22
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	2a f0       	brmi	.+10     	; 0x636 <__floatsisf+0x6c>
 62c:	9a 95       	dec	r25
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	da f7       	brpl	.-10     	; 0x62c <__floatsisf+0x62>
 636:	88 0f       	add	r24, r24
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__fp_inf>:
 640:	97 f9       	bld	r25, 7
 642:	9f 67       	ori	r25, 0x7F	; 127
 644:	80 e8       	ldi	r24, 0x80	; 128
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	08 95       	ret

0000064c <__fp_nan>:
 64c:	9f ef       	ldi	r25, 0xFF	; 255
 64e:	80 ec       	ldi	r24, 0xC0	; 192
 650:	08 95       	ret

00000652 <__fp_pscA>:
 652:	00 24       	eor	r0, r0
 654:	0a 94       	dec	r0
 656:	16 16       	cp	r1, r22
 658:	17 06       	cpc	r1, r23
 65a:	18 06       	cpc	r1, r24
 65c:	09 06       	cpc	r0, r25
 65e:	08 95       	ret

00000660 <__fp_pscB>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	12 16       	cp	r1, r18
 666:	13 06       	cpc	r1, r19
 668:	14 06       	cpc	r1, r20
 66a:	05 06       	cpc	r0, r21
 66c:	08 95       	ret

0000066e <__fp_round>:
 66e:	09 2e       	mov	r0, r25
 670:	03 94       	inc	r0
 672:	00 0c       	add	r0, r0
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0xc>
 676:	88 23       	and	r24, r24
 678:	52 f0       	brmi	.+20     	; 0x68e <__fp_round+0x20>
 67a:	bb 0f       	add	r27, r27
 67c:	40 f4       	brcc	.+16     	; 0x68e <__fp_round+0x20>
 67e:	bf 2b       	or	r27, r31
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0x18>
 682:	60 ff       	sbrs	r22, 0
 684:	04 c0       	rjmp	.+8      	; 0x68e <__fp_round+0x20>
 686:	6f 5f       	subi	r22, 0xFF	; 255
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	08 95       	ret

00000690 <__fp_split3>:
 690:	57 fd       	sbrc	r21, 7
 692:	90 58       	subi	r25, 0x80	; 128
 694:	44 0f       	add	r20, r20
 696:	55 1f       	adc	r21, r21
 698:	59 f0       	breq	.+22     	; 0x6b0 <__fp_splitA+0x10>
 69a:	5f 3f       	cpi	r21, 0xFF	; 255
 69c:	71 f0       	breq	.+28     	; 0x6ba <__fp_splitA+0x1a>
 69e:	47 95       	ror	r20

000006a0 <__fp_splitA>:
 6a0:	88 0f       	add	r24, r24
 6a2:	97 fb       	bst	r25, 7
 6a4:	99 1f       	adc	r25, r25
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <__fp_splitA+0x20>
 6a8:	9f 3f       	cpi	r25, 0xFF	; 255
 6aa:	79 f0       	breq	.+30     	; 0x6ca <__fp_splitA+0x2a>
 6ac:	87 95       	ror	r24
 6ae:	08 95       	ret
 6b0:	12 16       	cp	r1, r18
 6b2:	13 06       	cpc	r1, r19
 6b4:	14 06       	cpc	r1, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	f2 cf       	rjmp	.-28     	; 0x69e <__fp_split3+0xe>
 6ba:	46 95       	lsr	r20
 6bc:	f1 df       	rcall	.-30     	; 0x6a0 <__fp_splitA>
 6be:	08 c0       	rjmp	.+16     	; 0x6d0 <__fp_splitA+0x30>
 6c0:	16 16       	cp	r1, r22
 6c2:	17 06       	cpc	r1, r23
 6c4:	18 06       	cpc	r1, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	f1 cf       	rjmp	.-30     	; 0x6ac <__fp_splitA+0xc>
 6ca:	86 95       	lsr	r24
 6cc:	71 05       	cpc	r23, r1
 6ce:	61 05       	cpc	r22, r1
 6d0:	08 94       	sec
 6d2:	08 95       	ret

000006d4 <__fp_zero>:
 6d4:	e8 94       	clt

000006d6 <__fp_szero>:
 6d6:	bb 27       	eor	r27, r27
 6d8:	66 27       	eor	r22, r22
 6da:	77 27       	eor	r23, r23
 6dc:	cb 01       	movw	r24, r22
 6de:	97 f9       	bld	r25, 7
 6e0:	08 95       	ret

000006e2 <__mulsf3>:
 6e2:	0b d0       	rcall	.+22     	; 0x6fa <__mulsf3x>
 6e4:	c4 cf       	rjmp	.-120    	; 0x66e <__fp_round>
 6e6:	b5 df       	rcall	.-150    	; 0x652 <__fp_pscA>
 6e8:	28 f0       	brcs	.+10     	; 0x6f4 <__mulsf3+0x12>
 6ea:	ba df       	rcall	.-140    	; 0x660 <__fp_pscB>
 6ec:	18 f0       	brcs	.+6      	; 0x6f4 <__mulsf3+0x12>
 6ee:	95 23       	and	r25, r21
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <__mulsf3+0x12>
 6f2:	a6 cf       	rjmp	.-180    	; 0x640 <__fp_inf>
 6f4:	ab cf       	rjmp	.-170    	; 0x64c <__fp_nan>
 6f6:	11 24       	eor	r1, r1
 6f8:	ee cf       	rjmp	.-36     	; 0x6d6 <__fp_szero>

000006fa <__mulsf3x>:
 6fa:	ca df       	rcall	.-108    	; 0x690 <__fp_split3>
 6fc:	a0 f3       	brcs	.-24     	; 0x6e6 <__mulsf3+0x4>

000006fe <__mulsf3_pse>:
 6fe:	95 9f       	mul	r25, r21
 700:	d1 f3       	breq	.-12     	; 0x6f6 <__mulsf3+0x14>
 702:	95 0f       	add	r25, r21
 704:	50 e0       	ldi	r21, 0x00	; 0
 706:	55 1f       	adc	r21, r21
 708:	62 9f       	mul	r22, r18
 70a:	f0 01       	movw	r30, r0
 70c:	72 9f       	mul	r23, r18
 70e:	bb 27       	eor	r27, r27
 710:	f0 0d       	add	r31, r0
 712:	b1 1d       	adc	r27, r1
 714:	63 9f       	mul	r22, r19
 716:	aa 27       	eor	r26, r26
 718:	f0 0d       	add	r31, r0
 71a:	b1 1d       	adc	r27, r1
 71c:	aa 1f       	adc	r26, r26
 71e:	64 9f       	mul	r22, r20
 720:	66 27       	eor	r22, r22
 722:	b0 0d       	add	r27, r0
 724:	a1 1d       	adc	r26, r1
 726:	66 1f       	adc	r22, r22
 728:	82 9f       	mul	r24, r18
 72a:	22 27       	eor	r18, r18
 72c:	b0 0d       	add	r27, r0
 72e:	a1 1d       	adc	r26, r1
 730:	62 1f       	adc	r22, r18
 732:	73 9f       	mul	r23, r19
 734:	b0 0d       	add	r27, r0
 736:	a1 1d       	adc	r26, r1
 738:	62 1f       	adc	r22, r18
 73a:	83 9f       	mul	r24, r19
 73c:	a0 0d       	add	r26, r0
 73e:	61 1d       	adc	r22, r1
 740:	22 1f       	adc	r18, r18
 742:	74 9f       	mul	r23, r20
 744:	33 27       	eor	r19, r19
 746:	a0 0d       	add	r26, r0
 748:	61 1d       	adc	r22, r1
 74a:	23 1f       	adc	r18, r19
 74c:	84 9f       	mul	r24, r20
 74e:	60 0d       	add	r22, r0
 750:	21 1d       	adc	r18, r1
 752:	82 2f       	mov	r24, r18
 754:	76 2f       	mov	r23, r22
 756:	6a 2f       	mov	r22, r26
 758:	11 24       	eor	r1, r1
 75a:	9f 57       	subi	r25, 0x7F	; 127
 75c:	50 40       	sbci	r21, 0x00	; 0
 75e:	8a f0       	brmi	.+34     	; 0x782 <__mulsf3_pse+0x84>
 760:	e1 f0       	breq	.+56     	; 0x79a <__mulsf3_pse+0x9c>
 762:	88 23       	and	r24, r24
 764:	4a f0       	brmi	.+18     	; 0x778 <__mulsf3_pse+0x7a>
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	bb 1f       	adc	r27, r27
 76c:	66 1f       	adc	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	88 1f       	adc	r24, r24
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x64>
 778:	9e 3f       	cpi	r25, 0xFE	; 254
 77a:	51 05       	cpc	r21, r1
 77c:	70 f0       	brcs	.+28     	; 0x79a <__mulsf3_pse+0x9c>
 77e:	60 cf       	rjmp	.-320    	; 0x640 <__fp_inf>
 780:	aa cf       	rjmp	.-172    	; 0x6d6 <__fp_szero>
 782:	5f 3f       	cpi	r21, 0xFF	; 255
 784:	ec f3       	brlt	.-6      	; 0x780 <__mulsf3_pse+0x82>
 786:	98 3e       	cpi	r25, 0xE8	; 232
 788:	dc f3       	brlt	.-10     	; 0x780 <__mulsf3_pse+0x82>
 78a:	86 95       	lsr	r24
 78c:	77 95       	ror	r23
 78e:	67 95       	ror	r22
 790:	b7 95       	ror	r27
 792:	f7 95       	ror	r31
 794:	e7 95       	ror	r30
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c1 f7       	brne	.-16     	; 0x78a <__mulsf3_pse+0x8c>
 79a:	fe 2b       	or	r31, r30
 79c:	88 0f       	add	r24, r24
 79e:	91 1d       	adc	r25, r1
 7a0:	96 95       	lsr	r25
 7a2:	87 95       	ror	r24
 7a4:	97 f9       	bld	r25, 7
 7a6:	08 95       	ret

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
